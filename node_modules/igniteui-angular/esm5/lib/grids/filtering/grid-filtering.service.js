import { __decorate, __values } from "tslib";
import { Injectable, OnDestroy, NgModuleRef } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import icons from './svgIcons';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';
import { GridBaseAPIService } from '../api.service';
import { IgxDatePipeComponent } from '../common/pipes';
import { VerticalAlignment } from '../../services/overlay/utilities';
import { IgxOverlayService } from '../../services/overlay/overlay';
import { useAnimation } from '@angular/animations';
import { fadeIn, fadeOut } from '../../animations/main';
import { ExcelStylePositionStrategy } from './excel-style/excel-style-position-strategy';
import { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';
var FILTERING_ICONS_FONT_SET = 'filtering-icons';
/**
 * @hidden
 */
var ExpressionUI = /** @class */ (function () {
    function ExpressionUI() {
        this.isSelected = false;
        this.isVisible = true;
    }
    return ExpressionUI;
}());
export { ExpressionUI };
/**
 * @hidden
 */
var IgxFilteringService = /** @class */ (function () {
    function IgxFilteringService(gridAPI, _moduleRef, iconService, _overlayService) {
        this.gridAPI = gridAPI;
        this._moduleRef = _moduleRef;
        this.iconService = iconService;
        this._overlayService = _overlayService;
        this.columnsWithComplexFilter = new Set();
        this.areEventsSubscribed = false;
        this.destroy$ = new Subject();
        this.isFiltering = false;
        this.columnToExpressionsMap = new Map();
        this.columnStartIndex = -1;
        this._filterIconsRegistered = false;
        this.isFilterRowVisible = false;
        this.filteredColumn = null;
        this.selectedExpression = null;
        this.columnToMoreIconHidden = new Map();
        this.activeFilterCell = 0;
    }
    IgxFilteringService.prototype.ngOnDestroy = function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxFilteringService.prototype.toggleFilterDropdown = function (element, column, classRef) {
        if (!this._componentOverlayId || (this.column && this.column.field !== column.field)) {
            this.column = column;
            var filterIcon = this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
            var filterIconTarget = element.querySelector('.' + filterIcon);
            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;
            this._filterMenuOverlaySettings.outlet = this.grid.outlet;
            this._componentOverlayId =
                this._overlayService.attach(classRef, this._filterMenuOverlaySettings, this._moduleRef);
            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);
        }
    };
    IgxFilteringService.prototype.initFilteringSettings = function () {
        var _this = this;
        this._filterMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Bottom,
            openAnimation: useAnimation(fadeIn, { params: { duration: '250ms' } }),
            closeAnimation: useAnimation(fadeOut, { params: { duration: '200ms' } })
        };
        this._filterMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new ExcelStylePositionStrategy(this._filterMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        this._overlayService.onOpening.pipe(filter(function (overlay) { return overlay.id === _this._componentOverlayId; }), takeUntil(this.destroy$)).subscribe(function (eventArgs) {
            var instance = eventArgs.componentRef.instance;
            if (instance) {
                instance.initialize(_this.column, _this._overlayService, eventArgs.id);
            }
        });
        this._overlayService.onClosed.pipe(filter(function (overlay) { return overlay.id === _this._componentOverlayId; }), takeUntil(this.destroy$)).subscribe(function () {
            _this._componentOverlayId = null;
            _this.grid.theadRow.nativeElement.focus();
        });
    };
    IgxFilteringService.prototype.hideExcelFiltering = function () {
        if (this._componentOverlayId) {
            this._overlayService.hide(this._componentOverlayId);
        }
    };
    Object.defineProperty(IgxFilteringService.prototype, "datePipe", {
        get: function () {
            if (!this._datePipe) {
                this._datePipe = new IgxDatePipeComponent(this.grid.locale);
            }
            return this._datePipe;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Subscribe to grid's events.
     */
    IgxFilteringService.prototype.subscribeToEvents = function () {
        var _this = this;
        if (!this.areEventsSubscribed) {
            this.areEventsSubscribed = true;
            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe(function (eventArgs) {
                _this.updateFilteringCell(eventArgs.column);
            });
            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe(function (eventArgs) {
                if (eventArgs.startIndex !== _this.columnStartIndex) {
                    _this.columnStartIndex = eventArgs.startIndex;
                    _this.grid.filterCellList.forEach(function (filterCell) {
                        filterCell.updateFilterCellArea();
                    });
                }
            });
            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(function () {
                _this.grid.filterCellList.forEach(function (filterCell) {
                    filterCell.updateFilterCellArea();
                });
            });
        }
    };
    /**
     * Close filtering row if a column is hidden.
     */
    IgxFilteringService.prototype.hideFilteringRowOnColumnVisibilityChange = function (col) {
        var filteringRow = this.grid.filteringRow;
        if (filteringRow && filteringRow.column && filteringRow.column === col) {
            filteringRow.close();
        }
    };
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    IgxFilteringService.prototype.filterInternal = function (field, expressions) {
        if (expressions === void 0) { expressions = null; }
        this.isFiltering = true;
        var expressionsTree;
        if (expressions instanceof FilteringExpressionsTree) {
            expressionsTree = expressions;
        }
        else {
            expressionsTree = this.createSimpleFilteringTree(field, expressions);
        }
        if (expressionsTree.filteringOperands.length === 0) {
            this.clearFilter(field);
        }
        else {
            this.filter(field, null, expressionsTree);
        }
        this.isFiltering = false;
    };
    /**
     * Execute filtering on the grid.
     */
    IgxFilteringService.prototype.filter = function (field, value, conditionOrExpressionTree, ignoreCase) {
        var _this = this;
        var col = this.gridAPI.get_column_by_name(field);
        var filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);
        if (conditionOrExpressionTree) {
            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);
        }
        else {
            var expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);
            if (!expressionsTreeForColumn) {
                throw new Error('Invalid condition or Expression Tree!');
            }
            else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {
                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);
            }
            else {
                var expressionForColumn = expressionsTreeForColumn;
                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);
            }
        }
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(col.filteringExpressionsTree); });
    };
    /**
     * Clears the filter of a given column if name is provided. Otherwise clears the filters of all columns.
     */
    IgxFilteringService.prototype.clearFilter = function (field) {
        var _this = this;
        if (field) {
            var column = this.gridAPI.get_column_by_name(field);
            if (!column) {
                return;
            }
        }
        this.isFiltering = true;
        this.gridAPI.clear_filter(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(null); });
        if (field) {
            var expressions = this.getExpressions(field);
            expressions.length = 0;
        }
        else {
            this.grid.columns.forEach(function (c) {
                var expressions = _this.getExpressions(c.field);
                expressions.length = 0;
            });
        }
        this.isFiltering = false;
    };
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    IgxFilteringService.prototype.filterGlobal = function (value, condition, ignoreCase) {
        var _this = this;
        this.gridAPI.filter_global(value, condition, ignoreCase);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(_this.grid.filteringExpressionsTree); });
    };
    /**
     * Register filtering SVG icons in the icon service.
     */
    IgxFilteringService.prototype.registerSVGIcons = function () {
        var e_1, _a;
        if (!this._filterIconsRegistered) {
            try {
                for (var icons_1 = __values(icons), icons_1_1 = icons_1.next(); !icons_1_1.done; icons_1_1 = icons_1.next()) {
                    var icon = icons_1_1.value;
                    if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {
                        this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (icons_1_1 && !icons_1_1.done && (_a = icons_1.return)) _a.call(icons_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._filterIconsRegistered = true;
        }
    };
    /**
     * Returns the ExpressionUI array for a given column.
     */
    IgxFilteringService.prototype.getExpressions = function (columnId) {
        if (!this.columnToExpressionsMap.has(columnId)) {
            var column = this.grid.columns.find(function (col) { return col.field === columnId; });
            var expressionUIs = new Array();
            if (column) {
                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);
                this.columnToExpressionsMap.set(columnId, expressionUIs);
            }
            return expressionUIs;
        }
        return this.columnToExpressionsMap.get(columnId);
    };
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    IgxFilteringService.prototype.refreshExpressions = function () {
        var _this = this;
        if (!this.isFiltering) {
            this.columnsWithComplexFilter.clear();
            this.columnToExpressionsMap.forEach(function (value, key) {
                var column = _this.grid.columns.find(function (col) { return col.field === key; });
                if (column) {
                    value.length = 0;
                    _this.generateExpressionsList(column.filteringExpressionsTree, _this.grid.filteringExpressionsTree.operator, value);
                    var isComplex = _this.isFilteringTreeComplex(column.filteringExpressionsTree);
                    if (isComplex) {
                        _this.columnsWithComplexFilter.add(key);
                    }
                    _this.updateFilteringCell(column);
                }
                else {
                    _this.columnToExpressionsMap.delete(key);
                }
            });
        }
    };
    /**
     * Remove an ExpressionUI for a given column.
     */
    IgxFilteringService.prototype.removeExpression = function (columnId, indexToRemove) {
        var expressionsList = this.getExpressions(columnId);
        if (indexToRemove === 0 && expressionsList.length > 1) {
            expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === expressionsList.length - 1) {
            expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;
            expressionsList[0].beforeOperator = null;
            expressionsList[expressionsList.length - 1].afterOperator = null;
        }
        expressionsList.splice(indexToRemove, 1);
    };
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    IgxFilteringService.prototype.createSimpleFilteringTree = function (columnId, expressionUIList) {
        if (expressionUIList === void 0) { expressionUIList = null; }
        var expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);
        var expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);
        var currAndBranch;
        var currExpressionUI;
        for (var i = 0; i < expressionsList.length; i++) {
            currExpressionUI = expressionsList[i];
            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {
                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {
                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                    expressionsTree.filteringOperands.push(currAndBranch);
                }
                continue;
            }
            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||
                currExpressionUI.beforeOperator === FilteringLogic.Or) &&
                currExpressionUI.afterOperator === FilteringLogic.And) {
                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                expressionsTree.filteringOperands.push(currAndBranch);
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else if (currExpressionUI.beforeOperator === FilteringLogic.And) {
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else {
                expressionsTree.filteringOperands.push(currExpressionUI.expression);
                currAndBranch = null;
            }
        }
        return expressionsTree;
    };
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    IgxFilteringService.prototype.isFilterComplex = function (columnId) {
        if (this.columnsWithComplexFilter.has(columnId)) {
            return true;
        }
        var column = this.grid.columns.find(function (col) { return col.field === columnId; });
        var isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);
        if (isComplex) {
            this.columnsWithComplexFilter.add(columnId);
        }
        return isComplex;
    };
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    IgxFilteringService.prototype.getOperatorAsString = function (operator) {
        if (operator === 0) {
            return this.grid.resourceStrings.igx_grid_filter_operator_and;
        }
        else {
            return this.grid.resourceStrings.igx_grid_filter_operator_or;
        }
    };
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    IgxFilteringService.prototype.getChipLabel = function (expression) {
        if (expression.condition.isUnary) {
            return this.grid.resourceStrings["igx_grid_filter_" + expression.condition.name] || expression.condition.name;
        }
        else if (expression.searchVal instanceof Date) {
            return this.datePipe.transform(expression.searchVal, this.grid.locale);
        }
        else {
            return expression.searchVal;
        }
    };
    /**
     * Updates the content of a filterCell.
     */
    IgxFilteringService.prototype.updateFilteringCell = function (column) {
        var filterCell = column.filterCell;
        if (filterCell) {
            filterCell.updateFilterCellArea();
        }
    };
    Object.defineProperty(IgxFilteringService.prototype, "filteredData", {
        get: function () {
            return this.grid.filteredData;
        },
        enumerable: true,
        configurable: true
    });
    IgxFilteringService.prototype.isFilteringTreeComplex = function (expressions) {
        if (!expressions) {
            return false;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            var expressionsTree = expressions;
            if (expressionsTree.operator === FilteringLogic.Or) {
                var andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);
                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.
                return andOperatorsCount > 1;
            }
            var isComplex = false;
            for (var i = 0; i < expressionsTree.filteringOperands.length; i++) {
                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);
            }
            return isComplex;
        }
        return false;
    };
    IgxFilteringService.prototype.getChildAndOperatorsCount = function (expressions) {
        var count = 0;
        var operand;
        for (var i = 0; i < expressions.filteringOperands.length; i++) {
            operand = expressions[i];
            if (operand instanceof FilteringExpressionsTree) {
                if (operand.operator === FilteringLogic.And) {
                    count++;
                }
                count = count + this.getChildAndOperatorsCount(operand);
            }
        }
        return count;
    };
    IgxFilteringService.prototype.generateExpressionsList = function (expressions, operator, expressionsUIs) {
        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);
        // The beforeOperator of the first expression and the afterOperator of the last expression should be null
        if (expressionsUIs.length) {
            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;
        }
    };
    IgxFilteringService.prototype.generateExpressionsListRecursive = function (expressions, operator, expressionsUIs) {
        if (!expressions) {
            return;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            var expressionsTree = expressions;
            for (var i = 0; i < expressionsTree.filteringOperands.length; i++) {
                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);
            }
            if (expressionsUIs.length) {
                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;
            }
        }
        else {
            var exprUI = new ExpressionUI();
            exprUI.expression = expressions;
            exprUI.afterOperator = operator;
            var prevExprUI = expressionsUIs[expressionsUIs.length - 1];
            if (prevExprUI) {
                exprUI.beforeOperator = prevExprUI.afterOperator;
            }
            expressionsUIs.push(exprUI);
        }
    };
    IgxFilteringService.prototype.isFilteringExpressionsTreeEmpty = function (expressionTree) {
        if (FilteringExpressionsTree.empty(expressionTree)) {
            return true;
        }
        var expr;
        for (var i = 0; i < expressionTree.filteringOperands.length; i++) {
            expr = expressionTree.filteringOperands[i];
            if ((expr instanceof FilteringExpressionsTree)) {
                var exprTree = expr;
                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    };
    IgxFilteringService.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: NgModuleRef },
        { type: IgxIconService },
        { type: IgxOverlayService }
    ]; };
    IgxFilteringService = __decorate([
        Injectable()
    ], IgxFilteringService);
    return IgxFilteringService;
}());
export { IgxFilteringService };
//# sourceMappingURL=data:application/json;base64,