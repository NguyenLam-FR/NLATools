import { __assign, __decorate, __values } from "tslib";
import { Injectable } from '@angular/core';
import { cloneArray, isEqual, mergeObjects } from '../core/utils';
import { DataUtil, DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/transaction/transaction';
import { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS } from '../core/utils';
/**
 * @hidden
 */
var GridBaseAPIService = /** @class */ (function () {
    function GridBaseAPIService() {
        this.destroyMap = new Map();
    }
    GridBaseAPIService.prototype.get_column_by_name = function (name) {
        return this.grid.columnList.find(function (col) { return col.field === name; });
    };
    GridBaseAPIService.prototype.get_summary_data = function () {
        var grid = this.grid;
        var data = grid.filteredData;
        if (data && grid.hasPinnedRecords) {
            data = grid._filteredUnpinnedData;
        }
        if (!data) {
            if (grid.transactions.enabled) {
                data = DataUtil.mergeTransactions(cloneArray(grid.data), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
                var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === TransactionType.DELETE; }).map(function (t) { return t.id; });
                deletedRows.forEach(function (rowID) {
                    var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
                    var index = tempData.indexOf(rowID);
                    if (index !== -1) {
                        data.splice(index, 1);
                    }
                });
            }
            else {
                data = grid.data;
            }
        }
        return data;
    };
    /**
     * @hidden
     * @internal
     */
    GridBaseAPIService.prototype.getRowData = function (rowID) {
        var data = this.get_all_data(this.grid.transactions.enabled);
        var index = this.get_row_index_in_data(rowID);
        return data[index];
    };
    // TODO: Refactor
    GridBaseAPIService.prototype.escape_editMode = function () {
        this.grid.crudService.end();
    };
    // TODO: Refactor
    GridBaseAPIService.prototype.get_cell_inEditMode = function () {
        return this.grid.crudService.cell;
    };
    GridBaseAPIService.prototype.get_row_index_in_data = function (rowID) {
        var grid = this.grid;
        if (!grid) {
            return -1;
        }
        var data = this.get_all_data(grid.transactions.enabled);
        return grid.primaryKey ? data.findIndex(function (record) { return record[grid.primaryKey] === rowID; }) : data.indexOf(rowID);
    };
    GridBaseAPIService.prototype.get_row_by_key = function (rowSelector) {
        if (!this.grid) {
            return null;
        }
        var primaryKey = this.grid.primaryKey;
        if (primaryKey !== undefined && primaryKey !== null) {
            return this.grid.dataRowList.find(function (row) { return row.rowData[primaryKey] === rowSelector; });
        }
        else {
            return this.grid.dataRowList.find(function (row) { return row.rowData === rowSelector; });
        }
    };
    GridBaseAPIService.prototype.get_row_by_index = function (rowIndex) {
        return this.grid.rowList.find(function (row) { return row.index === rowIndex; });
    };
    GridBaseAPIService.prototype.get_cell_by_key = function (rowSelector, field) {
        var row = this.get_row_by_key(rowSelector);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.column.field === field; });
        }
    };
    GridBaseAPIService.prototype.get_cell_by_index = function (rowIndex, columnIndex) {
        var row = this.get_row_by_index(rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.columnIndex === columnIndex; });
        }
    };
    GridBaseAPIService.prototype.get_cell_by_visible_index = function (rowIndex, columnIndex) {
        var row = this.get_row_by_index(rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.visibleColumnIndex === columnIndex; });
        }
    };
    GridBaseAPIService.prototype.submit_value = function () {
        var cell = this.grid.crudService.cell;
        if (cell) {
            var args = this.update_cell(cell, cell.editValue);
            if (args.cancel) {
                return;
            }
            this.escape_editMode();
        }
    };
    GridBaseAPIService.prototype.update_cell = function (cell, value) {
        var _a;
        var data = this.get_all_data(this.grid.transactions.enabled);
        var index = this.get_row_index_in_data(cell.id.rowID);
        cell.editValue = value;
        var args = cell.createEditEventArgs();
        this.grid.onCellEdit.emit(args);
        if (args.cancel) {
            return args;
        }
        // Cast to number after emit
        // TODO: Clean up this
        args.newValue = cell.castToNumber(args.newValue);
        if (isEqual(args.oldValue, args.newValue)) {
            return args;
        }
        this.grid.summaryService.clearSummaryCache(args);
        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, (_a = {}, _a[cell.column.field] = args.newValue, _a));
        if (this.grid.primaryKey === cell.column.field) {
            if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {
                this.grid.selectionService.deselectRow(cell.id.rowID);
                this.grid.selectionService.selectRowById(args.newValue);
            }
            if (this.grid.hasSummarizedColumns) {
                this.grid.summaryService.removeSummaries(cell.id.rowID);
            }
        }
        if (!this.grid.rowEditable || !this.grid.crudService.row ||
            this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {
            this.grid.summaryService.clearSummaryCache(args);
            this.grid._pipeTrigger++;
        }
        return args;
    };
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    GridBaseAPIService.prototype.updateData = function (grid, rowID, rowValueInDataSource, rowCurrentValue, rowNewValue) {
        if (grid.transactions.enabled) {
            var transaction = {
                id: rowID,
                type: TransactionType.UPDATE,
                newValue: rowNewValue
            };
            grid.transactions.add(transaction, rowCurrentValue);
        }
        else {
            mergeObjects(rowValueInDataSource, rowNewValue);
        }
    };
    GridBaseAPIService.prototype._update_row = function (row, value) {
        var grid = this.grid;
        var rowInEditMode = grid.crudService.row;
        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);
        if (rowInEditMode && row.id === rowInEditMode.id) {
            row.data = __assign(__assign({}, row.data), rowInEditMode.transactionState);
            // TODO: Workaround for updating a row in edit mode through the API
        }
        else if (this.grid.transactions.enabled) {
            var state = grid.transactions.getState(row.id);
            row.data = state ? Object.assign({}, row.data, state.value) : row.data;
        }
    };
    GridBaseAPIService.prototype.update_row = function (row, value) {
        var grid = this.grid;
        var selected = grid.selectionService.isRowSelected(row.id);
        var rowInEditMode = grid.crudService.row;
        var data = this.get_all_data(grid.transactions.enabled);
        var index = this.get_row_index_in_data(row.id);
        var hasSummarized = grid.hasSummarizedColumns;
        this._update_row(row, value);
        var args = row.createEditEventArgs();
        // If no valid row is found
        if (index === -1) {
            return args;
        }
        grid.onRowEdit.emit(args);
        if (args.cancel) {
            return args;
        }
        if (rowInEditMode) {
            var hasChanges = grid.transactions.getState(args.rowID, true);
            grid.transactions.endPending(false);
            if (!hasChanges) {
                return args;
            }
        }
        if (!args.newValue) {
            return args;
        }
        if (hasSummarized) {
            grid.summaryService.removeSummaries(args.rowID);
        }
        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);
        var newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;
        if (selected) {
            grid.selectionService.deselectRow(row.id);
            grid.selectionService.selectRowById(newId);
        }
        if (hasSummarized) {
            grid.summaryService.removeSummaries(newId);
        }
        grid._pipeTrigger++;
        return args;
    };
    GridBaseAPIService.prototype.update_row_in_array = function (value, rowID, index) {
        var grid = this.grid;
        grid.data[index] = value;
    };
    GridBaseAPIService.prototype.sort = function (expression) {
        if (expression.dir === SortingDirection.None) {
            this.remove_grouping_expression(expression.fieldName);
        }
        var sortingState = cloneArray(this.grid.sortingExpressions);
        this.prepare_sorting_expression([sortingState], expression);
        this.grid.sortingExpressions = sortingState;
    };
    GridBaseAPIService.prototype.sort_multiple = function (expressions) {
        var e_1, _a;
        var sortingState = cloneArray(this.grid.sortingExpressions);
        try {
            for (var expressions_1 = __values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                if (each.dir === SortingDirection.None) {
                    this.remove_grouping_expression(each.fieldName);
                }
                this.prepare_sorting_expression([sortingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.grid.sortingExpressions = sortingState;
    };
    GridBaseAPIService.prototype.filter = function (fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        var grid = this.grid;
        var filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        var fieldFilterIndex = filteringTree.findIndex(fieldName);
        if (fieldFilterIndex > -1) {
            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);
        }
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);
        grid.filteringExpressionsTree = filteringTree;
    };
    GridBaseAPIService.prototype.filter_global = function (term, condition, ignoreCase) {
        var e_2, _a;
        if (!condition) {
            return;
        }
        var grid = this.grid;
        var filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        filteringTree.filteringOperands = [];
        try {
            for (var _b = __values(grid.columns), _c = _b.next(); !_c.done; _c = _b.next()) {
                var column = _c.value;
                this.prepare_filtering_expression(filteringTree, column.field, term, condition, ignoreCase || column.filteringIgnoreCase);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        grid.filteringExpressionsTree = filteringTree;
    };
    GridBaseAPIService.prototype.clear_filter = function (fieldName) {
        var grid = this.grid;
        grid.endEdit(false);
        var filteringState = grid.filteringExpressionsTree;
        var index = filteringState.findIndex(fieldName);
        if (index > -1) {
            filteringState.filteringOperands.splice(index, 1);
        }
        else if (!fieldName) {
            filteringState.filteringOperands = [];
        }
        grid.filteringExpressionsTree = filteringState;
    };
    GridBaseAPIService.prototype.clear_sort = function (fieldName) {
        var sortingState = this.grid.sortingExpressions;
        var index = sortingState.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index > -1) {
            sortingState.splice(index, 1);
            this.grid.sortingExpressions = sortingState;
        }
    };
    GridBaseAPIService.prototype.prepare_filtering_expression = function (filteringState, fieldName, searchVal, conditionOrExpressionsTree, ignoreCase, insertAtIndex) {
        if (insertAtIndex === void 0) { insertAtIndex = -1; }
        var newExpressionsTree;
        var oldExpressionsTreeIndex = filteringState.findIndex(fieldName);
        var expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            conditionOrExpressionsTree : null;
        var condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            null : conditionOrExpressionsTree;
        var newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (oldExpressionsTreeIndex === -1) {
            // no expressions tree found for this field
            if (expressionsTree) {
                if (insertAtIndex > -1) {
                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);
                }
                else {
                    filteringState.filteringOperands.push(expressionsTree);
                }
            }
            else if (condition) {
                // create expressions tree for this field and add the new expression to it
                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);
                newExpressionsTree.filteringOperands.push(newExpression);
                filteringState.filteringOperands.push(newExpressionsTree);
            }
        }
    };
    GridBaseAPIService.prototype.prepare_sorting_expression = function (stateCollections, expression) {
        if (expression.dir === SortingDirection.None) {
            stateCollections.forEach(function (state) {
                state.splice(state.findIndex(function (expr) { return expr.fieldName === expression.fieldName; }), 1);
            });
            return;
        }
        /**
         * We need to make sure the states in each collection with same fields point to the same object reference.
         * If the different state collections provided have different sizes we need to get the largest one.
         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.
         */
        var maxCollection = stateCollections[0];
        for (var i = 1; i < stateCollections.length; i++) {
            if (maxCollection.length < stateCollections[i].length) {
                maxCollection = stateCollections[i];
            }
        }
        var maxExpr = maxCollection.find(function (expr) { return expr.fieldName === expression.fieldName; });
        stateCollections.forEach(function (collection) {
            var myExpr = collection.find(function (expr) { return expr.fieldName === expression.fieldName; });
            if (!myExpr && !maxExpr) {
                // Expression with this fieldName is missing from the current and the max collection.
                collection.push(expression);
            }
            else if (!myExpr && maxExpr) {
                // Expression with this fieldName is missing from the current and but the max collection has.
                collection.push(maxExpr);
                Object.assign(maxExpr, expression);
            }
            else {
                // The current collection has the expression so just update it.
                Object.assign(myExpr, expression);
            }
        });
    };
    GridBaseAPIService.prototype.remove_grouping_expression = function (fieldName) {
    };
    GridBaseAPIService.prototype.clear_groupby = function (name) {
    };
    GridBaseAPIService.prototype.should_apply_number_style = function (column) {
        return column.dataType === DataType.Number;
    };
    GridBaseAPIService.prototype.get_data = function () {
        var grid = this.grid;
        var data = grid.data ? grid.data : [];
        return data;
    };
    GridBaseAPIService.prototype.get_all_data = function (includeTransactions) {
        if (includeTransactions === void 0) { includeTransactions = false; }
        var grid = this.grid;
        var data = grid.data ? grid.data : [];
        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;
        return data;
    };
    GridBaseAPIService.prototype.get_filtered_data = function () {
        return this.grid.filteredData;
    };
    GridBaseAPIService.prototype.getSortStrategyPerColumn = function (fieldName) {
        return this.get_column_by_name(fieldName) ?
            this.get_column_by_name(fieldName).sortStrategy : undefined;
    };
    GridBaseAPIService.prototype.addRowToData = function (rowData) {
        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions
        // If there is a row in edit - > commit and close
        var grid = this.grid;
        if (grid.transactions.enabled) {
            var transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;
            var transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };
            grid.transactions.add(transaction);
        }
        else {
            grid.data.push(rowData);
        }
    };
    GridBaseAPIService.prototype.deleteRowFromData = function (rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        var grid = this.grid;
        if (index !== -1) {
            if (grid.transactions.enabled) {
                var transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                grid.transactions.add(transaction, grid.data[index]);
            }
            else {
                grid.data.splice(index, 1);
            }
        }
        else {
            var state = grid.transactions.getState(rowID);
            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    };
    GridBaseAPIService.prototype.deleteRowById = function (rowId) {
        var index;
        var grid = this.grid;
        var data = this.get_all_data();
        if (grid.primaryKey) {
            index = data.map(function (record) { return record[grid.primaryKey]; }).indexOf(rowId);
        }
        else {
            index = data.indexOf(rowId);
        }
        var state = grid.transactions.getState(rowId);
        var hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;
        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode
        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above
        //  Otherwise just exit - there is nothing to delete
        if (index !== -1 || hasRowInNonDeletedState) {
            // Always exit edit when row is deleted
            grid.endEdit(true);
        }
        else {
            return;
        }
        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!
        grid.onRowDeleted.emit({ data: data[index] });
        this.deleteRowFromData(rowId, index);
        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();
        grid._pipeTrigger++;
        grid.notifyChanges();
        // Data needs to be recalculated if transactions are in place
        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale
        var dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;
        grid.refreshSearch();
        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {
            grid.page--;
        }
    };
    GridBaseAPIService.prototype.get_row_id = function (rowData) {
        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;
    };
    GridBaseAPIService.prototype.row_deleted_transaction = function (rowID) {
        var grid = this.grid;
        if (!grid) {
            return false;
        }
        if (!grid.transactions.enabled) {
            return false;
        }
        var state = grid.transactions.getState(rowID);
        if (state) {
            return state.type === TransactionType.DELETE;
        }
        return false;
    };
    GridBaseAPIService.prototype.get_row_expansion_state = function (record) {
        var grid = this.grid;
        var states = grid.expansionStates;
        var rowID = grid.primaryKey ? record[grid.primaryKey] : record;
        var expanded = states.get(rowID);
        if (expanded !== undefined) {
            return expanded;
        }
        else {
            return grid.getDefaultExpandState(record);
        }
    };
    GridBaseAPIService.prototype.set_row_expansion_state = function (rowID, expanded, event) {
        var grid = this.grid;
        var expandedStates = grid.expansionStates;
        if (!this.allow_expansion_state_change(rowID, expanded)) {
            return;
        }
        var args = {
            rowID: rowID,
            expanded: expanded,
            event: event,
            cancel: false
        };
        grid.onRowToggle.emit(args);
        if (args.cancel) {
            return;
        }
        expandedStates.set(rowID, expanded);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    GridBaseAPIService.prototype.get_rec_by_id = function (rowID) {
        return this.grid.primaryKey ? this.getRowData(rowID) : rowID;
    };
    GridBaseAPIService.prototype.allow_expansion_state_change = function (rowID, expanded) {
        return this.grid.expansionStates.get(rowID) !== expanded;
    };
    GridBaseAPIService.prototype.isToggleKey = function (key) {
        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);
    };
    GridBaseAPIService = __decorate([
        Injectable()
    ], GridBaseAPIService);
    return GridBaseAPIService;
}());
export { GridBaseAPIService };
//# sourceMappingURL=data:application/json;base64,