import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This enumeration is used to configure whether the pinning possition is set before or after
 * the target. DropPosition.None is acting like DropPosition.AfterDropTarget.
 */
export var DropPosition;
(function (DropPosition) {
    DropPosition[DropPosition["BeforeDropTarget"] = 0] = "BeforeDropTarget";
    DropPosition[DropPosition["AfterDropTarget"] = 1] = "AfterDropTarget";
    DropPosition[DropPosition["None"] = 2] = "None";
})(DropPosition || (DropPosition = {}));
/**
 * @hidden
 * @internal
 */
var IgxColumnMovingService = /** @class */ (function () {
    function IgxColumnMovingService() {
    }
    Object.defineProperty(IgxColumnMovingService.prototype, "column", {
        get: function () {
            return this._column;
        },
        set: function (val) {
            if (val) {
                this._column = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingService.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (val) {
            if (val) {
                this._icon = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnMovingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxColumnMovingService_Factory() { return new IgxColumnMovingService(); }, token: IgxColumnMovingService, providedIn: "root" });
    IgxColumnMovingService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], IgxColumnMovingService);
    return IgxColumnMovingService;
}());
export { IgxColumnMovingService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92aW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL21vdmluZy9tb3Zpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHM0M7OztHQUdHO0FBQ0gsTUFBTSxDQUFOLElBQVksWUFJWDtBQUpELFdBQVksWUFBWTtJQUNwQix1RUFBZ0IsQ0FBQTtJQUNoQixxRUFBZSxDQUFBO0lBQ2YsK0NBQUksQ0FBQTtBQUNSLENBQUMsRUFKVyxZQUFZLEtBQVosWUFBWSxRQUl2QjtBQUdEOzs7R0FHRztBQUlIO0lBQUE7S0F3QkM7SUFqQkcsc0JBQUksMENBQU07YUFBVjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDO2FBQ0QsVUFBVyxHQUF1QjtZQUM5QixJQUFJLEdBQUcsRUFBRTtnQkFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQzthQUN0QjtRQUNMLENBQUM7OztPQUxBO0lBT0Qsc0JBQUksd0NBQUk7YUFBUjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDO2FBQ0QsVUFBUyxHQUFRO1lBQ2IsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7YUFDcEI7UUFDTCxDQUFDOzs7T0FMQTs7SUFsQlEsc0JBQXNCO1FBSGxDLFVBQVUsQ0FBQztZQUNSLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUM7T0FDVyxzQkFBc0IsQ0F3QmxDO2lDQTdDRDtDQTZDQyxBQXhCRCxJQXdCQztTQXhCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoaXMgZW51bWVyYXRpb24gaXMgdXNlZCB0byBjb25maWd1cmUgd2hldGhlciB0aGUgcGlubmluZyBwb3NzaXRpb24gaXMgc2V0IGJlZm9yZSBvciBhZnRlclxuICogdGhlIHRhcmdldC4gRHJvcFBvc2l0aW9uLk5vbmUgaXMgYWN0aW5nIGxpa2UgRHJvcFBvc2l0aW9uLkFmdGVyRHJvcFRhcmdldC5cbiAqL1xuZXhwb3J0IGVudW0gRHJvcFBvc2l0aW9uIHtcbiAgICBCZWZvcmVEcm9wVGFyZ2V0LFxuICAgIEFmdGVyRHJvcFRhcmdldCxcbiAgICBOb25lXG59XG5cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q29sdW1uTW92aW5nU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfaWNvbjogYW55O1xuICAgIHByaXZhdGUgX2NvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuXG4gICAgcHVibGljIGNhbmNlbERyb3A6IGJvb2xlYW47XG4gICAgcHVibGljIGlzQ29sdW1uTW92aW5nOiBib29sZWFuO1xuXG4gICAgZ2V0IGNvbHVtbigpOiBJZ3hDb2x1bW5Db21wb25lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uO1xuICAgIH1cbiAgICBzZXQgY29sdW1uKHZhbDogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbHVtbiA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBpY29uKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pY29uO1xuICAgIH1cbiAgICBzZXQgaWNvbih2YWw6IGFueSkge1xuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9pY29uID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19