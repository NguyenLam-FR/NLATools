import { __decorate } from "tslib";
import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
var IgxScrollInertiaDirective = /** @class */ (function () {
    function IgxScrollInertiaDirective(element, _zone) {
        this.element = element;
        this._zone = _zone;
        this.wheelStep = 50;
        this.inertiaStep = 1.5;
        this.swipeToleranceX = 20;
        this.inertiaDeltaY = 3;
        this.inertiaDeltaX = 2;
        this.inertiaDuration = 0.5;
        this._savedSpeedsX = [];
        this.setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?
            'msSetPointerCapture' :
            'setPointerCapture';
        this.releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?
            'msReleasePointerCapture' :
            'releasePointerCapture';
        this.baseDeltaMultiplier = 1 / 120;
        this.firefoxDeltaMultiplier = 1 / 30;
    }
    IgxScrollInertiaDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this.parentElement = _this.element.nativeElement.parentElement || _this.element.nativeElement.parentNode;
            var targetElem = _this.parentElement;
            targetElem.addEventListener('wheel', function (evt) { _this.onWheel(evt); });
            targetElem.addEventListener('touchstart', function (evt) { _this.onTouchStart(evt); });
            targetElem.addEventListener('touchmove', function (evt) { _this.onTouchMove(evt); });
            targetElem.addEventListener('touchend', function (evt) { _this.onTouchEnd(evt); });
            targetElem.addEventListener('pointerdown', function (evt) { _this.onPointerDown(evt); });
            targetElem.addEventListener('pointerup', function (evt) { _this.onPointerUp(evt); });
            targetElem.addEventListener('MSGestureStart', function (evt) { _this.onMSGestureStart(evt); });
            targetElem.addEventListener('MSGestureChange', function (evt) { _this.onMSGestureChange(evt); });
        });
    };
    /**
     * @hidden
     * Function that is called when scrolling with the mouse wheel or using touchpad
     */
    IgxScrollInertiaDirective.prototype.onWheel = function (evt) {
        // if no scrollbar return
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var scrollDeltaX;
        var scrollDeltaY;
        var scrollStep = this.wheelStep;
        var minWheelStep = 1 / this.wheelStep;
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        if (evt.wheelDeltaX) {
            /* Option supported on Chrome, Safari, Opera.
            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaX = -evt.wheelDeltaX * this.baseDeltaMultiplier;
            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {
                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;
            }
        }
        else if (evt.deltaX) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            var deltaScaledX = evt.deltaX * (evt.deltaMode === 0 ? this.firefoxDeltaMultiplier : 1);
            scrollDeltaX = this.calcAxisCoords(deltaScaledX, -1, 1);
        }
        /** Get delta for the Y axis */
        if (evt.wheelDeltaY) {
            /* Option supported on Chrome, Safari, Opera.
            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaY = -evt.wheelDeltaY * this.baseDeltaMultiplier;
            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {
                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;
            }
        }
        else if (evt.deltaY) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            var deltaScaledY = evt.deltaY * (evt.deltaMode === 0 ? this.firefoxDeltaMultiplier : 1);
            scrollDeltaY = this.calcAxisCoords(deltaScaledY, -1, 1);
        }
        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {
            this._scrollToX(this._startX + scrollDeltaX * scrollStep);
            var curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;
            var maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);
            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {
                // Prevent navigating through pages when scrolling on Mac
                evt.preventDefault();
            }
        }
        else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {
            this._scrollToY(this._startY + scrollDeltaY * scrollStep);
            this.preventParentScroll(evt, true);
        }
    };
    /**
     * @hidden
     * When there is still room to scroll up/down prevent the parent elements from scrolling too.
     */
    IgxScrollInertiaDirective.prototype.preventParentScroll = function (evt, preventDefault) {
        var curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;
        var maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -
            this.IgxScrollInertiaScrollContainer.offsetHeight;
        if (0 < curScrollTop && curScrollTop < maxScrollTop) {
            if (preventDefault) {
                evt.preventDefault();
            }
            if (evt.stopPropagation) {
                evt.stopPropagation();
            }
        }
    };
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     */
    IgxScrollInertiaDirective.prototype.onTouchStart = function (event) {
        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {
            return false;
        }
        // stops any current ongoing inertia
        cancelAnimationFrame(this._touchInertiaAnimID);
        var touch = event.touches[0];
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = touch.pageX;
        this._touchStartY = touch.pageY;
        this._lastTouchEnd = new Date().getTime();
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._savedSpeedsX = [];
        this._savedSpeedsY = [];
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        this._touchPrevented = false;
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event, false);
        }
    };
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     */
    IgxScrollInertiaDirective.prototype.onTouchMove = function (event) {
        if (typeof MSGesture === 'function') {
            this._touchPrevented = false;
            return false;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var touch = event.touches[0];
        var destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);
        var destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);
        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */
        /* **********************************************************/
        var timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;
        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {
            var speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;
            var speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;
            // Save the last 5 speeds between two touchmoves on X axis
            if (this._savedSpeedsX.length < 5) {
                this._savedSpeedsX.push(speedX);
            }
            else {
                this._savedSpeedsX.shift();
                this._savedSpeedsX.push(speedX);
            }
            // Save the last 5 speeds between two touchmoves on Y axis
            if (this._savedSpeedsY.length < 5) {
                this._savedSpeedsY.push(speedY);
            }
            else {
                this._savedSpeedsY.shift();
                this._savedSpeedsY.push(speedY);
            }
        }
        this._lastTouchEnd = new Date().getTime();
        this._lastMovedX = this._lastTouchX - touch.pageX;
        this._lastMovedY = this._lastTouchY - touch.pageY;
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._totalMovedX += this._lastMovedX;
        var scrolledXY; // Object: {x, y}
        /*	Do not scroll using touch untill out of the swipeToleranceX bounds */
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            scrolledXY = this._scrollTo(this._startX, destY);
        }
        else {
            /*	Record the direction the first time we are out of the swipeToleranceX bounds.
            *	That way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /*	Scroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and
            don't change it after that ever until touchend and again touchstart */
            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        if (scrolledXY.x === 0 && scrolledXY.y === 0) {
            this._touchPrevented = true;
        }
        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event, true);
        }
    };
    IgxScrollInertiaDirective.prototype.onTouchEnd = function (event) {
        if (typeof MSGesture === 'function') {
            return;
        }
        var speedX = 0;
        var speedY = 0;
        // savedSpeedsX and savedSpeedsY have same length
        for (var i = 0; i < this._savedSpeedsX.length; i++) {
            speedX += this._savedSpeedsX[i];
            speedY += this._savedSpeedsY[i];
        }
        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;
        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;
        // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia
        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&
            (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {
            this._inertiaInit(speedX, speedY);
        }
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event, false);
        }
    };
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     */
    IgxScrollInertiaDirective.prototype.onPointerDown = function (event) {
        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||
            typeof MSGesture !== 'function') {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        // setPointerCaptureFName is the name of the function that is supported
        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);
        // create gestureObject only one time to prevent overlapping during intertia
        if (!this._gestureObject) {
            this._gestureObject = new MSGesture();
            this._gestureObject.target = this.parentElement;
        }
        this._gestureObject.addPointer(this._pointer);
    };
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     */
    IgxScrollInertiaDirective.prototype.onPointerUp = function (event) {
        if (!this._pointer) {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /* releasePointerCaptureFName is the name of the function that is supported */
        event.target[this.releasePointerCaptureFName](this._pointer);
        delete this._pointer;
    };
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     */
    IgxScrollInertiaDirective.prototype.onMSGestureStart = function (event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = event.screenX;
        this._touchStartY = event.screenY;
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        return false;
    };
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     */
    IgxScrollInertiaDirective.prototype.onMSGestureChange = function (event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var touchPos = event, destX = this._startX + this._touchStartX - touchPos.screenX, destY = this._startY + this._touchStartY - touchPos.screenY;
        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */
        this._totalMovedX = this._touchStartX - touchPos.screenX;
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            /* Do not scroll horizontally yet while in the tolerance range */
            this._scrollToY(destY);
        }
        else {
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /* Once the tolerance is exceeded it can be scrolled horizontally */
            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        return false;
    };
    IgxScrollInertiaDirective.prototype.calcAxisCoords = function (target, min, max) {
        if (target === undefined || target < min) {
            target = min;
        }
        else if (target > max) {
            target = max;
        }
        return target;
    };
    IgxScrollInertiaDirective.prototype._scrollTo = function (destX, destY) {
        var curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        var curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // TODO Trigger scrolling event?
        var scrolledX = this._scrollToX(destX);
        var scrolledY = this._scrollToY(destY);
        return { x: scrolledX, y: scrolledY };
    };
    IgxScrollInertiaDirective.prototype._scrollToX = function (dest) {
        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;
    };
    IgxScrollInertiaDirective.prototype._scrollToY = function (dest) {
        this.IgxScrollInertiaScrollContainer.scrollTop = dest;
    };
    IgxScrollInertiaDirective.prototype._inertiaInit = function (speedX, speedY) {
        var _this = this;
        var stepModifer = this.inertiaStep, inertiaDuration = this.inertiaDuration;
        var x = 0;
        this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // Sets timeout until executing next movement iteration of the inertia
        var inertiaStep = function () {
            if (x > 6) {
                cancelAnimationFrame(_this._touchInertiaAnimID);
                return;
            }
            if (Math.abs(speedX) > Math.abs(speedY)) {
                x += 0.05 / (1 * inertiaDuration);
            }
            else {
                x += 0.05 / (1 * inertiaDuration);
            }
            if (x <= 1) {
                // We use constant quation to determine the offset without speed falloff befor x reaches 1
                if (Math.abs(speedY) <= Math.abs(speedX) * _this.inertiaDeltaY) {
                    _this._nextX += 1 * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * _this.inertiaDeltaX) {
                    _this._nextY += 1 * speedY * 15 * stepModifer;
                }
            }
            else {
                // We use the quation "y = 2 / (x + 0.55) - 0.3" to determine the offset
                if (Math.abs(speedY) <= Math.abs(speedX) * _this.inertiaDeltaY) {
                    _this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * _this.inertiaDeltaX) {
                    _this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;
                }
            }
            // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse
            _this._scrollTo(_this._nextX, _this._nextY);
            _this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
        };
        // Start inertia and continue it recursively
        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
    };
    IgxScrollInertiaDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            var targetElem = _this.parentElement;
            targetElem.removeEventListener('wheel', function (evt) { _this.onWheel(evt); });
            targetElem.removeEventListener('touchstart', function (evt) { _this.onTouchStart(evt); });
            targetElem.removeEventListener('touchmove', function (evt) { _this.onTouchMove(evt); });
            targetElem.removeEventListener('touchend', function (evt) { _this.onTouchEnd(evt); });
            targetElem.removeEventListener('pointerdown', function (evt) { _this.onPointerDown(evt); });
            targetElem.removeEventListener('pointerup', function (evt) { _this.onPointerUp(evt); });
            targetElem.removeEventListener('MSGestureStart', function (evt) { _this.onMSGestureStart(evt); });
            targetElem.removeEventListener('MSGestureChange', function (evt) { _this.onMSGestureChange(evt); });
        });
    };
    IgxScrollInertiaDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "IgxScrollInertiaDirection", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "IgxScrollInertiaScrollContainer", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "wheelStep", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "inertiaStep", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "swipeToleranceX", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "inertiaDeltaY", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "inertiaDeltaX", void 0);
    __decorate([
        Input()
    ], IgxScrollInertiaDirective.prototype, "inertiaDuration", void 0);
    IgxScrollInertiaDirective = __decorate([
        Directive({ selector: '[igxScrollInertia]' })
    ], IgxScrollInertiaDirective);
    return IgxScrollInertiaDirective;
}());
export { IgxScrollInertiaDirective };
/**
 * @hidden
 */
var IgxScrollInertiaModule = /** @class */ (function () {
    function IgxScrollInertiaModule() {
    }
    IgxScrollInertiaModule = __decorate([
        NgModule({
            declarations: [IgxScrollInertiaDirective],
            exports: [IgxScrollInertiaDirective],
            imports: [CommonModule]
        })
    ], IgxScrollInertiaModule);
    return IgxScrollInertiaModule;
}());
export { IgxScrollInertiaModule };
//# sourceMappingURL=data:application/json;base64,