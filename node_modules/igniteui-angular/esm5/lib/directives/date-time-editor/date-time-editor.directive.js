import { __decorate, __extends, __param, __values } from "tslib";
import { Directive, Input, ElementRef, Renderer2, NgModule, Output, EventEmitter, Inject, LOCALE_ID, OnChanges, SimpleChanges } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { formatDate, DOCUMENT } from '@angular/common';
import { IgxMaskDirective } from '../mask/mask.directive';
import { MaskParsingService } from '../mask/mask-parsing.service';
import { DatePickerUtil } from '../../date-picker/date-picker.utils';
import { DatePart } from './date-time-editor.common';
/**
 * Date Time Editor provides a functionality to input, edit and format date and time.
 *
 * @igxModule IgxDateTimeEditorModule
 *
 * @igxParent IgxInputGroup
 *
 * @igxTheme igx-input-theme
 *
 * @igxKeywords date, time, editor
 *
 * @igxGroup Scheduling
 *
 * @remarks
 *
 * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.
 * It requires input in a specified or default input format which is visible in the input element as a placeholder.
 * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.
 * Supports display format that may differ from the input format.
 * Provides methods to increment and decrement any specific/targeted `DatePart`.
 *
 * @example
 * ```html
 * <igx-input-group>
 *   <input type="text" igxInput [igxDateTimeEditor]="'dd/MM/yyyy'" [displayFormat]="'shortDate'" [(ngModel)]="date"/>
 * </igx-input-group>
 * ```
 */
var IgxDateTimeEditorDirective = /** @class */ (function (_super) {
    __extends(IgxDateTimeEditorDirective, _super);
    function IgxDateTimeEditorDirective(renderer, elementRef, maskParser, _document, _locale) {
        var _this = _super.call(this, elementRef, maskParser, renderer) || this;
        _this.renderer = renderer;
        _this.elementRef = elementRef;
        _this.maskParser = maskParser;
        _this._document = _document;
        _this._locale = _locale;
        /**
         * Specify if the currently spun date segment should loop over.
         * @example
         * ```html
         * <input igxDateTimeEditor [isSpinLoop]="false">
         * ```
         */
        _this.isSpinLoop = true;
        /**
         * Emitted when the editor's value has changed.
         * @example
         * ```html
         * <input igxDateTimeEditor (valueChange)="onValueChanged($event)"/>
         * ```
         */
        _this.valueChange = new EventEmitter();
        /**
         * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate" [maxValue]="maxDate" (validationFailed)="onValidationFailed($event)"/>
         * ```
         */
        _this.validationFailed = new EventEmitter();
        _this.onTouchCallback = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.onChangeCallback = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.onValidatorChange = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.document = _this._document;
        _this.locale = _this.locale || _this._locale;
        return _this;
    }
    IgxDateTimeEditorDirective_1 = IgxDateTimeEditorDirective;
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "minValue", {
        /**
         * Minimum value required for the editor to remain valid.
         *
         * @remarks
         * If a `string` value is passed, it must be in the defined input format.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate">
         * ```
         */
        get: function () {
            return this._minValue;
        },
        set: function (value) {
            this._minValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "maxValue", {
        /**
         * Maximum value required for the editor to remain valid.
         *
         * @remarks
         * If a `string` value is passed in, it must be in the defined input format.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [maxValue]="maxDate">
         * ```
         */
        get: function () {
            return this._maxValue;
        },
        set: function (value) {
            this._maxValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "inputFormat", {
        get: function () {
            return this._format;
        },
        /**
         * Expected user input format (and placeholder).
         * @example
         * ```html
         * <input [igxDateTimeEditor]="'dd/MM/yyyy'">
         * ```
         */
        set: function (value) {
            if (value) {
                this._format = value;
            }
            var mask = (this.inputFormat || DatePickerUtil.DEFAULT_INPUT_FORMAT)
                .replace(new RegExp(/(?=[^t])[\w]/, 'g'), '0');
            this.mask = mask.indexOf('tt') !== -1 ? mask.replace(new RegExp('tt', 'g'), 'LL') : mask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Editor value.
         * @example
         * ```html
         * <input igxDateTimeEditor [value]="date">
         * ```
         */
        set: function (value) {
            this._value = value;
            this.onChangeCallback(value);
            this.updateMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "emptyMask", {
        get: function () {
            return this.maskParser.applyMask(null, this.maskOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "targetDatePart", {
        get: function () {
            var _this = this;
            var _a;
            if (this.document.activeElement === this.nativeElement) {
                return (_a = this._inputDateParts
                    .find(function (p) { return p.start <= _this.selectionStart && _this.selectionStart <= p.end && p.type !== DatePart.Literal; })) === null || _a === void 0 ? void 0 : _a.type;
            }
            else {
                if (this._inputDateParts.some(function (p) { return p.type === DatePart.Date; })) {
                    return DatePart.Date;
                }
                else if (this._inputDateParts.some(function (p) { return p.type === DatePart.Hours; })) {
                    return DatePart.Hours;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "hasDateParts", {
        get: function () {
            return this._inputDateParts.some(function (p) { return p.type === DatePart.Date
                || p.type === DatePart.Month
                || p.type === DatePart.Year; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "hasTimeParts", {
        get: function () {
            return this._inputDateParts.some(function (p) { return p.type === DatePart.Hours
                || p.type === DatePart.Minutes
                || p.type === DatePart.Seconds; });
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.ngOnChanges = function (changes) {
        if (changes['inputFormat'] || changes['locale']) {
            var defPlaceholder = this.inputFormat || DatePickerUtil.getDefaultInputFormat(this.locale);
            this._inputDateParts = DatePickerUtil.parseDateTimeFormat(this.inputFormat);
            this.inputFormat = this._inputDateParts.map(function (p) { return p.format; }).join('');
            if (!this.nativeElement.placeholder) {
                this.renderer.setAttribute(this.nativeElement, 'placeholder', defPlaceholder);
            }
            // TODO: fill in partial dates?
            this.updateMask();
        }
    };
    /** Clear the input element value. */
    IgxDateTimeEditorDirective.prototype.clear = function () {
        this.updateValue(null);
    };
    /**
     * Increment specified DatePart.
     * @param datePart The optional DatePart to increment. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    IgxDateTimeEditorDirective.prototype.increment = function (datePart) {
        var targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        var newValue = datePart
            ? this.spinValue(datePart, 1)
            : this.spinValue(targetDatePart, 1);
        this.updateValue(newValue ? newValue : new Date());
    };
    /**
     * Decrement specified DatePart.
     *
     * @param datePart The optional DatePart to decrement. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    IgxDateTimeEditorDirective.prototype.decrement = function (datePart) {
        var targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        var newValue = datePart
            ? this.spinValue(datePart, -1)
            : this.spinValue(targetDatePart, -1);
        this.updateValue(newValue ? newValue : new Date());
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.writeValue = function (value) {
        this._value = value;
        this.updateMask();
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.validate = function (control) {
        if (!this.inputIsComplete() || !control.value) {
            return { 'value': true };
        }
        var maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        var minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(control.value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { 'minValue': true };
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(control.value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { 'maxValue': true };
        }
        return null;
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnValidatorChange = function (fn) { this.onValidatorChange = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnChange = function (fn) { this.onChangeCallback = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnTouched = function (fn) { this.onTouchCallback = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.setDisabledState = function (isDisabled) { };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onInputChanged = function () {
        var _a;
        _super.prototype.onInputChanged.call(this);
        if (this.inputIsComplete()) {
            var parsedDate = this.parseDate(this.inputValue);
            if (this.isValidDate(parsedDate)) {
                this.updateValue(parsedDate);
            }
            else {
                var oldValue = this.value && new Date(this.value.getTime());
                var args = { oldValue: oldValue, newValue: parsedDate, userInput: this.inputValue };
                this.validationFailed.emit(args);
                if (((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.getTime) && args.newValue.getTime() !== oldValue.getTime()) {
                    this.updateValue(args.newValue);
                }
                else {
                    this.updateValue(null);
                }
            }
        }
        else {
            this.updateValue(null);
        }
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onKeyDown = function (event) {
        _super.prototype.onKeyDown.call(this, event);
        if (event.altKey) {
            return;
        }
        if (event.key === "ArrowUp" /* UP_ARROW */ || event.key === "Up" /* UP_ARROW_IE */ ||
            event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */) {
            this.spin(event);
            return;
        }
        if (event.ctrlKey && event.key === ";" /* SEMICOLON */) {
            this.updateValue(new Date());
        }
        this.moveCursor(event);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onFocus = function () {
        this._isFocused = true;
        this.onTouchCallback();
        this.updateMask();
        _super.prototype.onFocus.call(this);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onBlur = function (value) {
        this._isFocused = false;
        if (!this.inputIsComplete() && this.inputValue !== this.emptyMask) {
            this.updateValue(this.parseDate(this.inputValue));
        }
        else {
            this.updateMask();
        }
        _super.prototype.onBlur.call(this, value);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.updateMask = function () {
        if (this._isFocused) {
            if (!this.value) {
                return;
            }
            // store the cursor position as it will be moved during masking
            var cursor = this.selectionEnd;
            this.inputValue = this.getMaskedValue();
            this.setSelectionRange(cursor);
        }
        else {
            if (!this.value || !this.isValidDate(this.value)) {
                this.inputValue = '';
                return;
            }
            var format = this.displayFormat || this.inputFormat;
            if (format) {
                this.inputValue = formatDate(this.value, format.replace('tt', 'aa'), this.locale);
            }
            else {
                // TODO: formatter function?
                this.inputValue = this.value.toLocaleString();
            }
        }
    };
    IgxDateTimeEditorDirective.prototype.getMaskedValue = function () {
        var e_1, _a;
        var mask = this.emptyMask;
        try {
            for (var _b = __values(this._inputDateParts), _c = _b.next(); !_c.done; _c = _b.next()) {
                var part = _c.value;
                if (part.type === DatePart.Literal) {
                    continue;
                }
                var targetValue = this.getPartValue(part, part.format.length);
                mask = this.maskParser.replaceInMask(mask, targetValue, this.maskOptions, part.start, part.end).value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return mask;
    };
    // TODO: move isDate to utils
    IgxDateTimeEditorDirective.prototype.isDate = function (value) {
        return value instanceof Date && typeof value === 'object';
    };
    IgxDateTimeEditorDirective.prototype.valueInRange = function (value) {
        if (!value) {
            return false;
        }
        var maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        var minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        return true;
    };
    IgxDateTimeEditorDirective.prototype.spinValue = function (datePart, delta) {
        if (!this.value || !this.isValidDate(this.value)) {
            return null;
        }
        var newDate = new Date(this.value.getTime());
        switch (datePart) {
            case DatePart.Date:
                DatePickerUtil.spinDate(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Month:
                DatePickerUtil.spinMonth(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Year:
                DatePickerUtil.spinYear(delta, newDate);
                break;
            case DatePart.Hours:
                DatePickerUtil.spinHours(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Minutes:
                DatePickerUtil.spinMinutes(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Seconds:
                DatePickerUtil.spinSeconds(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.AmPm:
                var formatPart = this._inputDateParts.find(function (dp) { return dp.type === DatePart.AmPm; });
                var amPmFromMask = this.inputValue.substring(formatPart.start, formatPart.end);
                return DatePickerUtil.spinAmPm(newDate, this.value, amPmFromMask);
        }
        return newDate;
    };
    IgxDateTimeEditorDirective.prototype.updateValue = function (newDate) {
        this._oldValue = this.value;
        this.value = newDate;
        if (this.value && !this.valueInRange(this.value)) {
            this.validationFailed.emit({ oldValue: this._oldValue, newValue: this.value, userInput: this.inputValue });
        }
        if (this.inputIsComplete() || this.inputValue === this.emptyMask) {
            this.valueChange.emit(this.value);
        }
    };
    IgxDateTimeEditorDirective.prototype.toTwelveHourFormat = function (value) {
        var hour = parseInt(value.replace(new RegExp(this.promptChar, 'g'), '0'), 10);
        if (hour > 12) {
            hour -= 12;
        }
        else if (hour === 0) {
            hour = 12;
        }
        return hour;
    };
    IgxDateTimeEditorDirective.prototype.getPartValue = function (datePartInfo, partLength) {
        var maskedValue;
        var datePart = datePartInfo.type;
        switch (datePart) {
            case DatePart.Date:
                maskedValue = this.value.getDate();
                break;
            case DatePart.Month:
                // months are zero based
                maskedValue = this.value.getMonth() + 1;
                break;
            case DatePart.Year:
                if (partLength === 2) {
                    maskedValue = this.prependValue(parseInt(this.value.getFullYear().toString().slice(-2), 10), partLength, '0');
                }
                else {
                    maskedValue = this.value.getFullYear();
                }
                break;
            case DatePart.Hours:
                if (datePartInfo.format.indexOf('h') !== -1) {
                    maskedValue = this.prependValue(this.toTwelveHourFormat(this.value.getHours().toString()), partLength, '0');
                }
                else {
                    maskedValue = this.value.getHours();
                }
                break;
            case DatePart.Minutes:
                maskedValue = this.value.getMinutes();
                break;
            case DatePart.Seconds:
                maskedValue = this.value.getSeconds();
                break;
            case DatePart.AmPm:
                maskedValue = this.value.getHours() >= 12 ? 'PM' : 'AM';
                break;
        }
        if (datePartInfo.type !== DatePart.AmPm) {
            return this.prependValue(maskedValue, partLength, '0');
        }
        return maskedValue;
    };
    IgxDateTimeEditorDirective.prototype.prependValue = function (value, partLength, prependChar) {
        return (prependChar + value.toString()).slice(-partLength);
    };
    IgxDateTimeEditorDirective.prototype.spin = function (event) {
        event.preventDefault();
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                this.increment();
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                this.decrement();
                break;
        }
    };
    IgxDateTimeEditorDirective.prototype.inputIsComplete = function () {
        return this.inputValue.indexOf(this.promptChar) === -1;
    };
    IgxDateTimeEditorDirective.prototype.isValidDate = function (date) {
        return date && date.getTime && !isNaN(date.getTime());
    };
    // TODO: move parseDate to utils
    IgxDateTimeEditorDirective.prototype.parseDate = function (val) {
        if (!val) {
            return null;
        }
        return DatePickerUtil.parseValueFromMask(val, this._inputDateParts, this.promptChar);
    };
    IgxDateTimeEditorDirective.prototype.moveCursor = function (event) {
        var value = event.target.value;
        switch (event.key) {
            case "ArrowLeft" /* LEFT_ARROW */:
            case "Left" /* LEFT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value));
                }
                break;
            case "ArrowRight" /* RIGHT_ARROW */:
            case "Right" /* RIGHT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value, 1));
                }
                break;
        }
    };
    /**
     * Move the cursor in a specific direction until it reaches a date/time separator.
     * Then return its index.
     *
     * @param value The string it operates on.
     * @param direction 0 is left, 1 is right. Default is 0.
     */
    IgxDateTimeEditorDirective.prototype.getNewPosition = function (value, direction) {
        if (direction === void 0) { direction = 0; }
        var literals = this._inputDateParts.filter(function (p) { return p.type === DatePart.Literal; });
        var cursorPos = this.selectionStart;
        if (!direction) {
            do {
                cursorPos = cursorPos > 0 ? --cursorPos : cursorPos;
            } while (!literals.some(function (l) { return l.end === cursorPos; }) && cursorPos > 0);
            return cursorPos;
        }
        else {
            do {
                cursorPos++;
            } while (!literals.some(function (l) { return l.start === cursorPos; }) && cursorPos < value.length);
            return cursorPos;
        }
    };
    var IgxDateTimeEditorDirective_1;
    IgxDateTimeEditorDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: MaskParsingService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "locale", void 0);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "minValue", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "maxValue", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "isSpinLoop", void 0);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "displayFormat", void 0);
    __decorate([
        Input("igxDateTimeEditor")
    ], IgxDateTimeEditorDirective.prototype, "inputFormat", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "value", null);
    __decorate([
        Output()
    ], IgxDateTimeEditorDirective.prototype, "valueChange", void 0);
    __decorate([
        Output()
    ], IgxDateTimeEditorDirective.prototype, "validationFailed", void 0);
    IgxDateTimeEditorDirective = IgxDateTimeEditorDirective_1 = __decorate([
        Directive({
            selector: '[igxDateTimeEditor]',
            exportAs: 'igxDateTimeEditor',
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective_1, multi: true },
                { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective_1, multi: true }
            ]
        }),
        __param(3, Inject(DOCUMENT)),
        __param(4, Inject(LOCALE_ID))
    ], IgxDateTimeEditorDirective);
    return IgxDateTimeEditorDirective;
}(IgxMaskDirective));
export { IgxDateTimeEditorDirective };
var IgxDateTimeEditorModule = /** @class */ (function () {
    function IgxDateTimeEditorModule() {
    }
    IgxDateTimeEditorModule = __decorate([
        NgModule({
            declarations: [IgxDateTimeEditorDirective],
            exports: [IgxDateTimeEditorDirective]
        })
    ], IgxDateTimeEditorModule);
    return IgxDateTimeEditorModule;
}());
export { IgxDateTimeEditorModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLWVkaXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZGF0ZS10aW1lLWVkaXRvci9kYXRlLXRpbWUtZWRpdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUM1QixTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUN2RixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRXlDLGFBQWEsRUFBRSxpQkFBaUIsR0FDL0UsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRWxFLE9BQU8sRUFDTCxjQUFjLEVBQ2YsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQTRDLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRS9GOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EyQkc7QUFTSDtJQUFnRCw4Q0FBZ0I7SUFvTDlELG9DQUNZLFFBQW1CLEVBQ25CLFVBQXNCLEVBQ3RCLFVBQThCLEVBQ2QsU0FBYyxFQUNiLE9BQVk7UUFMekMsWUFNRSxrQkFBTSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxTQUd4QztRQVJXLGNBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsZ0JBQVUsR0FBVixVQUFVLENBQW9CO1FBQ2QsZUFBUyxHQUFULFNBQVMsQ0FBSztRQUNi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LDRCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQ3BGLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsNEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTthQUNqRjtTQUNGLENBQUM7UUF5TEcsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEIsV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7T0F6TFQsMEJBQTBCLENBc2pCdEM7SUFBRCxpQ0FBQztDQUFBLEFBdGpCRCxDQUFnRCxnQkFBZ0IsR0FzakIvRDtTQXRqQlksMEJBQTBCO0FBNGpCdkM7SUFBQTtJQUF1QyxDQUFDO0lBQTNCLHVCQUF1QjtRQUpuQyxRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztZQUMxQyxPQUFPLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztTQUN0QyxDQUFDO09BQ1csdUJBQXVCLENBQUk7SUFBRCw4QkFBQztDQUFBLEFBQXhDLElBQXdDO1NBQTNCLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMiwgTmdNb2R1bGUsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIExPQ0FMRV9JRCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29udHJvbFZhbHVlQWNjZXNzb3IsXG4gIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBOR19WQUxJREFUT1JTLCBOR19WQUxVRV9BQ0NFU1NPUixcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSwgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSWd4TWFza0RpcmVjdGl2ZSB9IGZyb20gJy4uL21hc2svbWFzay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWFza1BhcnNpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vbWFzay9tYXNrLXBhcnNpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBLRVlTIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQge1xuICBEYXRlUGlja2VyVXRpbFxufSBmcm9tICcuLi8uLi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci51dGlscyc7XG5pbXBvcnQgeyBJZ3hEYXRlVGltZUVkaXRvckV2ZW50QXJncywgRGF0ZVBhcnRJbmZvLCBEYXRlUGFydCB9IGZyb20gJy4vZGF0ZS10aW1lLWVkaXRvci5jb21tb24nO1xuXG4vKipcbiAqIERhdGUgVGltZSBFZGl0b3IgcHJvdmlkZXMgYSBmdW5jdGlvbmFsaXR5IHRvIGlucHV0LCBlZGl0IGFuZCBmb3JtYXQgZGF0ZSBhbmQgdGltZS5cbiAqXG4gKiBAaWd4TW9kdWxlIElneERhdGVUaW1lRWRpdG9yTW9kdWxlXG4gKlxuICogQGlneFBhcmVudCBJZ3hJbnB1dEdyb3VwXG4gKlxuICogQGlneFRoZW1lIGlneC1pbnB1dC10aGVtZVxuICpcbiAqIEBpZ3hLZXl3b3JkcyBkYXRlLCB0aW1lLCBlZGl0b3JcbiAqXG4gKiBAaWd4R3JvdXAgU2NoZWR1bGluZ1xuICpcbiAqIEByZW1hcmtzXG4gKlxuICogVGhlIElnbml0ZSBVSSBEYXRlIFRpbWUgRWRpdG9yIERpcmVjdGl2ZSBtYWtlcyBpdCBlYXN5IGZvciBkZXZlbG9wZXJzIHRvIG1hbmlwdWxhdGUgZGF0ZS90aW1lIHVzZXIgaW5wdXQuXG4gKiBJdCByZXF1aXJlcyBpbnB1dCBpbiBhIHNwZWNpZmllZCBvciBkZWZhdWx0IGlucHV0IGZvcm1hdCB3aGljaCBpcyB2aXNpYmxlIGluIHRoZSBpbnB1dCBlbGVtZW50IGFzIGEgcGxhY2Vob2xkZXIuXG4gKiBJdCBhbGxvd3MgdGhlIGlucHV0IG9mIG9ubHkgZGF0ZSAoZXg6ICdkZC9NTS95eXl5JyksIG9ubHkgdGltZSAoZXg6J0hIOm1tIHR0Jykgb3IgYm90aCBhdCBvbmNlLCBpZiBuZWVkZWQuXG4gKiBTdXBwb3J0cyBkaXNwbGF5IGZvcm1hdCB0aGF0IG1heSBkaWZmZXIgZnJvbSB0aGUgaW5wdXQgZm9ybWF0LlxuICogUHJvdmlkZXMgbWV0aG9kcyB0byBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBhbnkgc3BlY2lmaWMvdGFyZ2V0ZWQgYERhdGVQYXJ0YC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1pbnB1dC1ncm91cD5cbiAqICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWd4SW5wdXQgW2lneERhdGVUaW1lRWRpdG9yXT1cIidkZC9NTS95eXl5J1wiIFtkaXNwbGF5Rm9ybWF0XT1cIidzaG9ydERhdGUnXCIgWyhuZ01vZGVsKV09XCJkYXRlXCIvPlxuICogPC9pZ3gtaW5wdXQtZ3JvdXA+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lneERhdGVUaW1lRWRpdG9yXScsXG4gIGV4cG9ydEFzOiAnaWd4RGF0ZVRpbWVFZGl0b3InLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogSWd4RGF0ZVRpbWVFZGl0b3JEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogSWd4RGF0ZVRpbWVFZGl0b3JEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRlVGltZUVkaXRvckRpcmVjdGl2ZSBleHRlbmRzIElneE1hc2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIFZhbGlkYXRvciwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAvKipcbiAgICogTG9jYWxlIHNldHRpbmdzIHVzZWQgZm9yIHZhbHVlIGZvcm1hdHRpbmcuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFVzZXMgQW5ndWxhcidzIGBMT0NBTEVfSURgIGJ5IGRlZmF1bHQuIEFmZmVjdHMgYm90aCBpbnB1dCBtYXNrIGFuZCBkaXNwbGF5IGZvcm1hdCBpZiB0aG9zZSBhcmUgbm90IHNldC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgaHRtbFxuICAgKiA8aW5wdXQgaWd4RGF0ZVRpbWVFZGl0b3IgW2xvY2FsZV09XCInZW4nXCI+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIGxvY2FsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHZhbHVlIHJlcXVpcmVkIGZvciB0aGUgZWRpdG9yIHRvIHJlbWFpbiB2YWxpZC5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogSWYgYSBgc3RyaW5nYCB2YWx1ZSBpcyBwYXNzZWQsIGl0IG11c3QgYmUgaW4gdGhlIGRlZmluZWQgaW5wdXQgZm9ybWF0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBodG1sXG4gICAqIDxpbnB1dCBpZ3hEYXRlVGltZUVkaXRvciBbbWluVmFsdWVdPVwibWluRGF0ZVwiPlxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBnZXQgbWluVmFsdWUoKTogc3RyaW5nIHwgRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX21pblZhbHVlO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtaW5WYWx1ZSh2YWx1ZTogc3RyaW5nIHwgRGF0ZSkge1xuICAgIHRoaXMuX21pblZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vblZhbGlkYXRvckNoYW5nZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1heGltdW0gdmFsdWUgcmVxdWlyZWQgZm9yIHRoZSBlZGl0b3IgdG8gcmVtYWluIHZhbGlkLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBJZiBhIGBzdHJpbmdgIHZhbHVlIGlzIHBhc3NlZCBpbiwgaXQgbXVzdCBiZSBpbiB0aGUgZGVmaW5lZCBpbnB1dCBmb3JtYXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGh0bWxcbiAgICogPGlucHV0IGlneERhdGVUaW1lRWRpdG9yIFttYXhWYWx1ZV09XCJtYXhEYXRlXCI+XG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljIGdldCBtYXhWYWx1ZSgpOiBzdHJpbmcgfCBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4VmFsdWU7XG4gIH1cblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IG1heFZhbHVlKHZhbHVlOiBzdHJpbmcgfCBEYXRlKSB7XG4gICAgdGhpcy5fbWF4VmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9uVmFsaWRhdG9yQ2hhbmdlKCk7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmeSBpZiB0aGUgY3VycmVudGx5IHNwdW4gZGF0ZSBzZWdtZW50IHNob3VsZCBsb29wIG92ZXIuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGh0bWxcbiAgICogPGlucHV0IGlneERhdGVUaW1lRWRpdG9yIFtpc1NwaW5Mb29wXT1cImZhbHNlXCI+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIGlzU3Bpbkxvb3AgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBTZXQgYm90aCBwcmUtZGVmaW5lZCBmb3JtYXQgb3B0aW9ucyBzdWNoIGFzIGBzaG9ydERhdGVgIGFuZCBgbG9uZ0RhdGVgLFxuICAgKiBhcyB3ZWxsIGFzIGNvbnN0cnVjdGVkIGZvcm1hdCBzdHJpbmcgdXNpbmcgY2hhcmFjdGVycyBzdXBwb3J0ZWQgYnkgYERhdGVQaXBlYCwgZS5nLiBgRUUvTU0veXl5eWAuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGh0bWxcbiAgICogPGlucHV0IGlneERhdGVUaW1lRWRpdG9yIFtkaXNwbGF5Rm9ybWF0XT1cIidzaG9ydERhdGUnXCI+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIGRpc3BsYXlGb3JtYXQ6IHN0cmluZztcblxuICAvKipcbiAgICogRXhwZWN0ZWQgdXNlciBpbnB1dCBmb3JtYXQgKGFuZCBwbGFjZWhvbGRlcikuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGh0bWxcbiAgICogPGlucHV0IFtpZ3hEYXRlVGltZUVkaXRvcl09XCInZGQvTU0veXl5eSdcIj5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoYGlneERhdGVUaW1lRWRpdG9yYClcbiAgcHVibGljIHNldCBpbnB1dEZvcm1hdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9mb3JtYXQgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgbWFzayA9ICh0aGlzLmlucHV0Rm9ybWF0IHx8IERhdGVQaWNrZXJVdGlsLkRFRkFVTFRfSU5QVVRfRk9STUFUKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgvKD89W150XSlbXFx3XS8sICdnJyksICcwJyk7XG4gICAgdGhpcy5tYXNrID0gbWFzay5pbmRleE9mKCd0dCcpICE9PSAtMSA/IG1hc2sucmVwbGFjZShuZXcgUmVnRXhwKCd0dCcsICdnJyksICdMTCcpIDogbWFzaztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW5wdXRGb3JtYXQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICB9XG5cbiAgLyoqXG4gICAqIEVkaXRvciB2YWx1ZS5cbiAgICogQGV4YW1wbGVcbiAgICogYGBgaHRtbFxuICAgKiA8aW5wdXQgaWd4RGF0ZVRpbWVFZGl0b3IgW3ZhbHVlXT1cImRhdGVcIj5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBEYXRlKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sodmFsdWUpO1xuICAgIHRoaXMudXBkYXRlTWFzaygpO1xuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHRlZCB3aGVuIHRoZSBlZGl0b3IncyB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICogQGV4YW1wbGVcbiAgICogYGBgaHRtbFxuICAgKiA8aW5wdXQgaWd4RGF0ZVRpbWVFZGl0b3IgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2VkKCRldmVudClcIi8+XG4gICAqIGBgYFxuICAgKi9cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcblxuICAvKipcbiAgICogRW1pdHRlZCB3aGVuIHRoZSBlZGl0b3IgaXMgbm90IHdpdGhpbiBhIHNwZWNpZmllZCByYW5nZSBvciB3aGVuIHRoZSBlZGl0b3IncyB2YWx1ZSBpcyBpbiBhbiBpbnZhbGlkIHN0YXRlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBodG1sXG4gICAqIDxpbnB1dCBpZ3hEYXRlVGltZUVkaXRvciBbbWluVmFsdWVdPVwibWluRGF0ZVwiIFttYXhWYWx1ZV09XCJtYXhEYXRlXCIgKHZhbGlkYXRpb25GYWlsZWQpPVwib25WYWxpZGF0aW9uRmFpbGVkKCRldmVudClcIi8+XG4gICAqIGBgYFxuICAgKi9cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyB2YWxpZGF0aW9uRmFpbGVkID0gbmV3IEV2ZW50RW1pdHRlcjxJZ3hEYXRlVGltZUVkaXRvckV2ZW50QXJncz4oKTtcblxuICBwcml2YXRlIF92YWx1ZTogRGF0ZTtcbiAgcHJpdmF0ZSBfZm9ybWF0OiBzdHJpbmc7XG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50O1xuICBwcml2YXRlIF9pc0ZvY3VzZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX21pblZhbHVlOiBzdHJpbmcgfCBEYXRlO1xuICBwcml2YXRlIF9tYXhWYWx1ZTogc3RyaW5nIHwgRGF0ZTtcbiAgcHJpdmF0ZSBfb2xkVmFsdWU6IERhdGUgfCBzdHJpbmc7XG4gIHByaXZhdGUgX2lucHV0RGF0ZVBhcnRzOiBEYXRlUGFydEluZm9bXTtcbiAgcHJpdmF0ZSBvblRvdWNoQ2FsbGJhY2sgPSAoLi4uYXJnczogYW55W10pID0+IHsgfTtcbiAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7IH07XG4gIHByaXZhdGUgb25WYWxpZGF0b3JDaGFuZ2UgPSAoLi4uYXJnczogYW55W10pID0+IHsgfTtcblxuICBwcml2YXRlIGdldCBlbXB0eU1hc2soKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrUGFyc2VyLmFwcGx5TWFzayhudWxsLCB0aGlzLm1hc2tPcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHRhcmdldERhdGVQYXJ0KCk6IERhdGVQYXJ0IHtcbiAgICBpZiAodGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dERhdGVQYXJ0c1xuICAgICAgICAuZmluZChwID0+IHAuc3RhcnQgPD0gdGhpcy5zZWxlY3Rpb25TdGFydCAmJiB0aGlzLnNlbGVjdGlvblN0YXJ0IDw9IHAuZW5kICYmIHAudHlwZSAhPT0gRGF0ZVBhcnQuTGl0ZXJhbCk/LnR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9pbnB1dERhdGVQYXJ0cy5zb21lKHAgPT4gcC50eXBlID09PSBEYXRlUGFydC5EYXRlKSkge1xuICAgICAgICByZXR1cm4gRGF0ZVBhcnQuRGF0ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faW5wdXREYXRlUGFydHMuc29tZShwID0+IHAudHlwZSA9PT0gRGF0ZVBhcnQuSG91cnMpKSB7XG4gICAgICAgIHJldHVybiBEYXRlUGFydC5Ib3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldCBoYXNEYXRlUGFydHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RGF0ZVBhcnRzLnNvbWUoXG4gICAgICBwID0+IHAudHlwZSA9PT0gRGF0ZVBhcnQuRGF0ZVxuICAgICAgICB8fCBwLnR5cGUgPT09IERhdGVQYXJ0Lk1vbnRoXG4gICAgICAgIHx8IHAudHlwZSA9PT0gRGF0ZVBhcnQuWWVhcik7XG4gIH1cblxuICBwcml2YXRlIGdldCBoYXNUaW1lUGFydHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RGF0ZVBhcnRzLnNvbWUoXG4gICAgICBwID0+IHAudHlwZSA9PT0gRGF0ZVBhcnQuSG91cnNcbiAgICAgICAgfHwgcC50eXBlID09PSBEYXRlUGFydC5NaW51dGVzXG4gICAgICAgIHx8IHAudHlwZSA9PT0gRGF0ZVBhcnQuU2Vjb25kcyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcm90ZWN0ZWQgbWFza1BhcnNlcjogTWFza1BhcnNpbmdTZXJ2aWNlLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnksXG4gICAgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgX2xvY2FsZTogYW55KSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZiwgbWFza1BhcnNlciwgcmVuZGVyZXIpO1xuICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLl9kb2N1bWVudCBhcyBEb2N1bWVudDtcbiAgICB0aGlzLmxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzWydpbnB1dEZvcm1hdCddIHx8IGNoYW5nZXNbJ2xvY2FsZSddKSB7XG4gICAgICBjb25zdCBkZWZQbGFjZWhvbGRlciA9IHRoaXMuaW5wdXRGb3JtYXQgfHwgRGF0ZVBpY2tlclV0aWwuZ2V0RGVmYXVsdElucHV0Rm9ybWF0KHRoaXMubG9jYWxlKTtcbiAgICAgIHRoaXMuX2lucHV0RGF0ZVBhcnRzID0gRGF0ZVBpY2tlclV0aWwucGFyc2VEYXRlVGltZUZvcm1hdCh0aGlzLmlucHV0Rm9ybWF0KTtcbiAgICAgIHRoaXMuaW5wdXRGb3JtYXQgPSB0aGlzLl9pbnB1dERhdGVQYXJ0cy5tYXAocCA9PiBwLmZvcm1hdCkuam9pbignJyk7XG4gICAgICBpZiAoIXRoaXMubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdwbGFjZWhvbGRlcicsIGRlZlBsYWNlaG9sZGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IGZpbGwgaW4gcGFydGlhbCBkYXRlcz9cbiAgICAgIHRoaXMudXBkYXRlTWFzaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDbGVhciB0aGUgaW5wdXQgZWxlbWVudCB2YWx1ZS4gKi9cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlVmFsdWUobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50IHNwZWNpZmllZCBEYXRlUGFydC5cbiAgICogQHBhcmFtIGRhdGVQYXJ0IFRoZSBvcHRpb25hbCBEYXRlUGFydCB0byBpbmNyZW1lbnQuIERlZmF1bHRzIHRvIERhdGUgb3IgSG91cnMod2hlbiBEYXRlIGlzIGFic2VudCBmcm9tIHRoZSBpbnB1dEZvcm1hdCAtIGV4OidISDptbScpLlxuICAgKi9cbiAgcHVibGljIGluY3JlbWVudChkYXRlUGFydD86IERhdGVQYXJ0KTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0RGF0ZVBhcnQgPSB0aGlzLnRhcmdldERhdGVQYXJ0O1xuICAgIGlmICghdGFyZ2V0RGF0ZVBhcnQpIHsgcmV0dXJuOyB9XG4gICAgY29uc3QgbmV3VmFsdWUgPSBkYXRlUGFydFxuICAgICAgPyB0aGlzLnNwaW5WYWx1ZShkYXRlUGFydCwgMSlcbiAgICAgIDogdGhpcy5zcGluVmFsdWUodGFyZ2V0RGF0ZVBhcnQsIDEpO1xuICAgIHRoaXMudXBkYXRlVmFsdWUobmV3VmFsdWUgPyBuZXdWYWx1ZSA6IG5ldyBEYXRlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlbWVudCBzcGVjaWZpZWQgRGF0ZVBhcnQuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRlUGFydCBUaGUgb3B0aW9uYWwgRGF0ZVBhcnQgdG8gZGVjcmVtZW50LiBEZWZhdWx0cyB0byBEYXRlIG9yIEhvdXJzKHdoZW4gRGF0ZSBpcyBhYnNlbnQgZnJvbSB0aGUgaW5wdXRGb3JtYXQgLSBleDonSEg6bW0nKS5cbiAgICovXG4gIHB1YmxpYyBkZWNyZW1lbnQoZGF0ZVBhcnQ/OiBEYXRlUGFydCk6IHZvaWQge1xuICAgIGNvbnN0IHRhcmdldERhdGVQYXJ0ID0gdGhpcy50YXJnZXREYXRlUGFydDtcbiAgICBpZiAoIXRhcmdldERhdGVQYXJ0KSB7IHJldHVybjsgfVxuICAgIGNvbnN0IG5ld1ZhbHVlID0gZGF0ZVBhcnRcbiAgICAgID8gdGhpcy5zcGluVmFsdWUoZGF0ZVBhcnQsIC0xKVxuICAgICAgOiB0aGlzLnNwaW5WYWx1ZSh0YXJnZXREYXRlUGFydCwgLTEpO1xuICAgIHRoaXMudXBkYXRlVmFsdWUobmV3VmFsdWUgPyBuZXdWYWx1ZSA6IG5ldyBEYXRlKCkpO1xuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudXBkYXRlTWFzaygpO1xuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKCF0aGlzLmlucHV0SXNDb21wbGV0ZSgpIHx8ICFjb250cm9sLnZhbHVlKSB7XG4gICAgICByZXR1cm4geyAndmFsdWUnOiB0cnVlIH07XG4gICAgfVxuXG4gICAgY29uc3QgbWF4VmFsdWVBc0RhdGUgPSB0aGlzLmlzRGF0ZSh0aGlzLm1heFZhbHVlKSA/IHRoaXMubWF4VmFsdWUgOiB0aGlzLnBhcnNlRGF0ZSh0aGlzLm1heFZhbHVlKTtcbiAgICBjb25zdCBtaW5WYWx1ZUFzRGF0ZSA9IHRoaXMuaXNEYXRlKHRoaXMubWluVmFsdWUpID8gdGhpcy5taW5WYWx1ZSA6IHRoaXMucGFyc2VEYXRlKHRoaXMubWluVmFsdWUpO1xuICAgIGlmIChtaW5WYWx1ZUFzRGF0ZVxuICAgICAgJiYgRGF0ZVBpY2tlclV0aWwubGVzc1RoYW5NaW5WYWx1ZShcbiAgICAgICAgY29udHJvbC52YWx1ZSwgbWluVmFsdWVBc0RhdGUsIHRoaXMuaGFzVGltZVBhcnRzLCB0aGlzLmhhc0RhdGVQYXJ0cykpIHtcbiAgICAgIHJldHVybiB7ICdtaW5WYWx1ZSc6IHRydWUgfTtcbiAgICB9XG4gICAgaWYgKG1heFZhbHVlQXNEYXRlXG4gICAgICAmJiBEYXRlUGlja2VyVXRpbC5ncmVhdGVyVGhhbk1heFZhbHVlKFxuICAgICAgICBjb250cm9sLnZhbHVlLCBtYXhWYWx1ZUFzRGF0ZSwgdGhpcy5oYXNUaW1lUGFydHMsIHRoaXMuaGFzRGF0ZVBhcnRzKSkge1xuICAgICAgcmV0dXJuIHsgJ21heFZhbHVlJzogdHJ1ZSB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlPyhmbjogKCkgPT4gdm9pZCk6IHZvaWQgeyB0aGlzLm9uVmFsaWRhdG9yQ2hhbmdlID0gZm47IH1cblxuICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQgeyB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBmbjsgfVxuXG4gIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQgeyB0aGlzLm9uVG91Y2hDYWxsYmFjayA9IGZuOyB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyBzZXREaXNhYmxlZFN0YXRlPyhpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7IH1cblxuICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIG9uSW5wdXRDaGFuZ2VkKCkge1xuICAgIHN1cGVyLm9uSW5wdXRDaGFuZ2VkKCk7XG4gICAgaWYgKHRoaXMuaW5wdXRJc0NvbXBsZXRlKCkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSB0aGlzLnBhcnNlRGF0ZSh0aGlzLmlucHV0VmFsdWUpO1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZERhdGUocGFyc2VkRGF0ZSkpIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShwYXJzZWREYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZSAmJiBuZXcgRGF0ZSh0aGlzLnZhbHVlLmdldFRpbWUoKSk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7IG9sZFZhbHVlOiBvbGRWYWx1ZSwgbmV3VmFsdWU6IHBhcnNlZERhdGUsIHVzZXJJbnB1dDogdGhpcy5pbnB1dFZhbHVlIH07XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbkZhaWxlZC5lbWl0KGFyZ3MpO1xuICAgICAgICBpZiAoYXJncy5uZXdWYWx1ZT8uZ2V0VGltZSAmJiBhcmdzLm5ld1ZhbHVlLmdldFRpbWUoKSAhPT0gb2xkVmFsdWUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShhcmdzLm5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBzdXBlci5vbktleURvd24oZXZlbnQpO1xuICAgIGlmIChldmVudC5hbHRLZXkpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gS0VZUy5VUF9BUlJPVyB8fCBldmVudC5rZXkgPT09IEtFWVMuVVBfQVJST1dfSUUgfHxcbiAgICAgIGV2ZW50LmtleSA9PT0gS0VZUy5ET1dOX0FSUk9XIHx8IGV2ZW50LmtleSA9PT0gS0VZUy5ET1dOX0FSUk9XX0lFKSB7XG4gICAgICB0aGlzLnNwaW4oZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleSA9PT0gS0VZUy5TRU1JQ09MT04pIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUobmV3IERhdGUoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5tb3ZlQ3Vyc29yKGV2ZW50KTtcbiAgfVxuXG4gIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgb25Gb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLl9pc0ZvY3VzZWQgPSB0cnVlO1xuICAgIHRoaXMub25Ub3VjaENhbGxiYWNrKCk7XG4gICAgdGhpcy51cGRhdGVNYXNrKCk7XG4gICAgc3VwZXIub25Gb2N1cygpO1xuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyBvbkJsdXIodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5pbnB1dElzQ29tcGxldGUoKSAmJiB0aGlzLmlucHV0VmFsdWUgIT09IHRoaXMuZW1wdHlNYXNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMucGFyc2VEYXRlKHRoaXMuaW5wdXRWYWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZU1hc2soKTtcbiAgICB9XG5cbiAgICBzdXBlci5vbkJsdXIodmFsdWUpO1xuICB9XG5cbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gIHB1YmxpYyB1cGRhdGVNYXNrKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcbiAgICAgIGlmICghdGhpcy52YWx1ZSkgeyByZXR1cm47IH1cbiAgICAgIC8vIHN0b3JlIHRoZSBjdXJzb3IgcG9zaXRpb24gYXMgaXQgd2lsbCBiZSBtb3ZlZCBkdXJpbmcgbWFza2luZ1xuICAgICAgY29uc3QgY3Vyc29yID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmdldE1hc2tlZFZhbHVlKCk7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy52YWx1ZSB8fCAhdGhpcy5pc1ZhbGlkRGF0ZSh0aGlzLnZhbHVlKSkge1xuICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSAnJztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy5kaXNwbGF5Rm9ybWF0IHx8IHRoaXMuaW5wdXRGb3JtYXQ7XG4gICAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9IGZvcm1hdERhdGUodGhpcy52YWx1ZSwgZm9ybWF0LnJlcGxhY2UoJ3R0JywgJ2FhJyksIHRoaXMubG9jYWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IGZvcm1hdHRlciBmdW5jdGlvbj9cbiAgICAgICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy52YWx1ZS50b0xvY2FsZVN0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TWFza2VkVmFsdWUoKTogc3RyaW5nIHtcbiAgICBsZXQgbWFzayA9IHRoaXMuZW1wdHlNYXNrO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9pbnB1dERhdGVQYXJ0cykge1xuICAgICAgaWYgKHBhcnQudHlwZSA9PT0gRGF0ZVBhcnQuTGl0ZXJhbCkgeyBjb250aW51ZTsgfVxuICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSB0aGlzLmdldFBhcnRWYWx1ZShwYXJ0LCBwYXJ0LmZvcm1hdC5sZW5ndGgpO1xuICAgICAgbWFzayA9IHRoaXMubWFza1BhcnNlci5yZXBsYWNlSW5NYXNrKG1hc2ssIHRhcmdldFZhbHVlLCB0aGlzLm1hc2tPcHRpb25zLCBwYXJ0LnN0YXJ0LCBwYXJ0LmVuZCkudmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hc2s7XG4gIH1cblxuICAvLyBUT0RPOiBtb3ZlIGlzRGF0ZSB0byB1dGlsc1xuICBwcml2YXRlIGlzRGF0ZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgRGF0ZSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWx1ZUluUmFuZ2UodmFsdWU6IERhdGUpOiBib29sZWFuIHtcbiAgICBpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGNvbnN0IG1heFZhbHVlQXNEYXRlID0gdGhpcy5pc0RhdGUodGhpcy5tYXhWYWx1ZSkgPyB0aGlzLm1heFZhbHVlIDogdGhpcy5wYXJzZURhdGUodGhpcy5tYXhWYWx1ZSk7XG4gICAgY29uc3QgbWluVmFsdWVBc0RhdGUgPSB0aGlzLmlzRGF0ZSh0aGlzLm1pblZhbHVlKSA/IHRoaXMubWluVmFsdWUgOiB0aGlzLnBhcnNlRGF0ZSh0aGlzLm1pblZhbHVlKTtcbiAgICBpZiAobWluVmFsdWVBc0RhdGVcbiAgICAgICYmIERhdGVQaWNrZXJVdGlsLmxlc3NUaGFuTWluVmFsdWUoXG4gICAgICAgIHZhbHVlLCBtaW5WYWx1ZUFzRGF0ZSwgdGhpcy5oYXNUaW1lUGFydHMsIHRoaXMuaGFzRGF0ZVBhcnRzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobWF4VmFsdWVBc0RhdGVcbiAgICAgICYmIERhdGVQaWNrZXJVdGlsLmdyZWF0ZXJUaGFuTWF4VmFsdWUoXG4gICAgICAgIHZhbHVlLCBtYXhWYWx1ZUFzRGF0ZSwgdGhpcy5oYXNUaW1lUGFydHMsIHRoaXMuaGFzRGF0ZVBhcnRzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzcGluVmFsdWUoZGF0ZVBhcnQ6IERhdGVQYXJ0LCBkZWx0YTogbnVtYmVyKTogRGF0ZSB7XG4gICAgaWYgKCF0aGlzLnZhbHVlIHx8ICF0aGlzLmlzVmFsaWREYXRlKHRoaXMudmFsdWUpKSB7IHJldHVybiBudWxsOyB9XG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMudmFsdWUuZ2V0VGltZSgpKTtcbiAgICBzd2l0Y2ggKGRhdGVQYXJ0KSB7XG4gICAgICBjYXNlIERhdGVQYXJ0LkRhdGU6XG4gICAgICAgIERhdGVQaWNrZXJVdGlsLnNwaW5EYXRlKGRlbHRhLCBuZXdEYXRlLCB0aGlzLmlzU3Bpbkxvb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0ZVBhcnQuTW9udGg6XG4gICAgICAgIERhdGVQaWNrZXJVdGlsLnNwaW5Nb250aChkZWx0YSwgbmV3RGF0ZSwgdGhpcy5pc1NwaW5Mb29wKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGVQYXJ0LlllYXI6XG4gICAgICAgIERhdGVQaWNrZXJVdGlsLnNwaW5ZZWFyKGRlbHRhLCBuZXdEYXRlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGVQYXJ0LkhvdXJzOlxuICAgICAgICBEYXRlUGlja2VyVXRpbC5zcGluSG91cnMoZGVsdGEsIG5ld0RhdGUsIHRoaXMuaXNTcGluTG9vcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRlUGFydC5NaW51dGVzOlxuICAgICAgICBEYXRlUGlja2VyVXRpbC5zcGluTWludXRlcyhkZWx0YSwgbmV3RGF0ZSwgdGhpcy5pc1NwaW5Mb29wKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGVQYXJ0LlNlY29uZHM6XG4gICAgICAgIERhdGVQaWNrZXJVdGlsLnNwaW5TZWNvbmRzKGRlbHRhLCBuZXdEYXRlLCB0aGlzLmlzU3Bpbkxvb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0ZVBhcnQuQW1QbTpcbiAgICAgICAgY29uc3QgZm9ybWF0UGFydCA9IHRoaXMuX2lucHV0RGF0ZVBhcnRzLmZpbmQoZHAgPT4gZHAudHlwZSA9PT0gRGF0ZVBhcnQuQW1QbSk7XG4gICAgICAgIGNvbnN0IGFtUG1Gcm9tTWFzayA9IHRoaXMuaW5wdXRWYWx1ZS5zdWJzdHJpbmcoZm9ybWF0UGFydC5zdGFydCwgZm9ybWF0UGFydC5lbmQpO1xuICAgICAgICByZXR1cm4gRGF0ZVBpY2tlclV0aWwuc3BpbkFtUG0obmV3RGF0ZSwgdGhpcy52YWx1ZSwgYW1QbUZyb21NYXNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVmFsdWUobmV3RGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMuX29sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0gbmV3RGF0ZTtcblxuICAgIGlmICh0aGlzLnZhbHVlICYmICF0aGlzLnZhbHVlSW5SYW5nZSh0aGlzLnZhbHVlKSkge1xuICAgICAgdGhpcy52YWxpZGF0aW9uRmFpbGVkLmVtaXQoeyBvbGRWYWx1ZTogdGhpcy5fb2xkVmFsdWUsIG5ld1ZhbHVlOiB0aGlzLnZhbHVlLCB1c2VySW5wdXQ6IHRoaXMuaW5wdXRWYWx1ZSB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRJc0NvbXBsZXRlKCkgfHwgdGhpcy5pbnB1dFZhbHVlID09PSB0aGlzLmVtcHR5TWFzaykge1xuICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9Ud2VsdmVIb3VyRm9ybWF0KHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGxldCBob3VyID0gcGFyc2VJbnQodmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMucHJvbXB0Q2hhciwgJ2cnKSwgJzAnKSwgMTApO1xuICAgIGlmIChob3VyID4gMTIpIHtcbiAgICAgIGhvdXIgLT0gMTI7XG4gICAgfSBlbHNlIGlmIChob3VyID09PSAwKSB7XG4gICAgICBob3VyID0gMTI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvdXI7XG4gIH1cblxuICBwcml2YXRlIGdldFBhcnRWYWx1ZShkYXRlUGFydEluZm86IERhdGVQYXJ0SW5mbywgcGFydExlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgbWFza2VkVmFsdWU7XG4gICAgY29uc3QgZGF0ZVBhcnQgPSBkYXRlUGFydEluZm8udHlwZTtcbiAgICBzd2l0Y2ggKGRhdGVQYXJ0KSB7XG4gICAgICBjYXNlIERhdGVQYXJ0LkRhdGU6XG4gICAgICAgIG1hc2tlZFZhbHVlID0gdGhpcy52YWx1ZS5nZXREYXRlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRlUGFydC5Nb250aDpcbiAgICAgICAgLy8gbW9udGhzIGFyZSB6ZXJvIGJhc2VkXG4gICAgICAgIG1hc2tlZFZhbHVlID0gdGhpcy52YWx1ZS5nZXRNb250aCgpICsgMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGVQYXJ0LlllYXI6XG4gICAgICAgIGlmIChwYXJ0TGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgbWFza2VkVmFsdWUgPSB0aGlzLnByZXBlbmRWYWx1ZShcbiAgICAgICAgICAgIHBhcnNlSW50KHRoaXMudmFsdWUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpLnNsaWNlKC0yKSwgMTApLCBwYXJ0TGVuZ3RoLCAnMCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hc2tlZFZhbHVlID0gdGhpcy52YWx1ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRlUGFydC5Ib3VyczpcbiAgICAgICAgaWYgKGRhdGVQYXJ0SW5mby5mb3JtYXQuaW5kZXhPZignaCcpICE9PSAtMSkge1xuICAgICAgICAgIG1hc2tlZFZhbHVlID0gdGhpcy5wcmVwZW5kVmFsdWUoXG4gICAgICAgICAgICB0aGlzLnRvVHdlbHZlSG91ckZvcm1hdCh0aGlzLnZhbHVlLmdldEhvdXJzKCkudG9TdHJpbmcoKSksIHBhcnRMZW5ndGgsICcwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFza2VkVmFsdWUgPSB0aGlzLnZhbHVlLmdldEhvdXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGVQYXJ0Lk1pbnV0ZXM6XG4gICAgICAgIG1hc2tlZFZhbHVlID0gdGhpcy52YWx1ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRlUGFydC5TZWNvbmRzOlxuICAgICAgICBtYXNrZWRWYWx1ZSA9IHRoaXMudmFsdWUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0ZVBhcnQuQW1QbTpcbiAgICAgICAgbWFza2VkVmFsdWUgPSB0aGlzLnZhbHVlLmdldEhvdXJzKCkgPj0gMTIgPyAnUE0nIDogJ0FNJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGRhdGVQYXJ0SW5mby50eXBlICE9PSBEYXRlUGFydC5BbVBtKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmVwZW5kVmFsdWUobWFza2VkVmFsdWUsIHBhcnRMZW5ndGgsICcwJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmVwZW5kVmFsdWUodmFsdWU6IG51bWJlciwgcGFydExlbmd0aDogbnVtYmVyLCBwcmVwZW5kQ2hhcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHByZXBlbmRDaGFyICsgdmFsdWUudG9TdHJpbmcoKSkuc2xpY2UoLXBhcnRMZW5ndGgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzcGluKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSBLRVlTLlVQX0FSUk9XOlxuICAgICAgY2FzZSBLRVlTLlVQX0FSUk9XX0lFOlxuICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS0VZUy5ET1dOX0FSUk9XOlxuICAgICAgY2FzZSBLRVlTLkRPV05fQVJST1dfSUU6XG4gICAgICAgIHRoaXMuZGVjcmVtZW50KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW5wdXRJc0NvbXBsZXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlucHV0VmFsdWUuaW5kZXhPZih0aGlzLnByb21wdENoYXIpID09PSAtMTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZERhdGUoZGF0ZTogRGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBkYXRlICYmIGRhdGUuZ2V0VGltZSAmJiAhaXNOYU4oZGF0ZS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgLy8gVE9ETzogbW92ZSBwYXJzZURhdGUgdG8gdXRpbHNcbiAgcHVibGljIHBhcnNlRGF0ZSh2YWw6IHN0cmluZyk6IERhdGUgfCBudWxsIHtcbiAgICBpZiAoIXZhbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIHJldHVybiBEYXRlUGlja2VyVXRpbC5wYXJzZVZhbHVlRnJvbU1hc2sodmFsLCB0aGlzLl9pbnB1dERhdGVQYXJ0cywgdGhpcy5wcm9tcHRDaGFyKTtcbiAgfVxuXG4gIHByaXZhdGUgbW92ZUN1cnNvcihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSBLRVlTLkxFRlRfQVJST1c6XG4gICAgICBjYXNlIEtFWVMuTEVGVF9BUlJPV19JRTpcbiAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UodGhpcy5nZXROZXdQb3NpdGlvbih2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLRVlTLlJJR0hUX0FSUk9XOlxuICAgICAgY2FzZSBLRVlTLlJJR0hUX0FSUk9XX0lFOlxuICAgICAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25SYW5nZSh0aGlzLmdldE5ld1Bvc2l0aW9uKHZhbHVlLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGN1cnNvciBpbiBhIHNwZWNpZmljIGRpcmVjdGlvbiB1bnRpbCBpdCByZWFjaGVzIGEgZGF0ZS90aW1lIHNlcGFyYXRvci5cbiAgICogVGhlbiByZXR1cm4gaXRzIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyBpdCBvcGVyYXRlcyBvbi5cbiAgICogQHBhcmFtIGRpcmVjdGlvbiAwIGlzIGxlZnQsIDEgaXMgcmlnaHQuIERlZmF1bHQgaXMgMC5cbiAgICovXG4gIHByaXZhdGUgZ2V0TmV3UG9zaXRpb24odmFsdWU6IHN0cmluZywgZGlyZWN0aW9uID0gMCk6IG51bWJlciB7XG4gICAgY29uc3QgbGl0ZXJhbHMgPSB0aGlzLl9pbnB1dERhdGVQYXJ0cy5maWx0ZXIocCA9PiBwLnR5cGUgPT09IERhdGVQYXJ0LkxpdGVyYWwpO1xuICAgIGxldCBjdXJzb3JQb3MgPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnNvclBvcyA9IGN1cnNvclBvcyA+IDAgPyAtLWN1cnNvclBvcyA6IGN1cnNvclBvcztcbiAgICAgIH0gd2hpbGUgKCFsaXRlcmFscy5zb21lKGwgPT4gbC5lbmQgPT09IGN1cnNvclBvcykgJiYgY3Vyc29yUG9zID4gMCk7XG4gICAgICByZXR1cm4gY3Vyc29yUG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnNvclBvcysrO1xuICAgICAgfSB3aGlsZSAoIWxpdGVyYWxzLnNvbWUobCA9PiBsLnN0YXJ0ID09PSBjdXJzb3JQb3MpICYmIGN1cnNvclBvcyA8IHZhbHVlLmxlbmd0aCk7XG4gICAgICByZXR1cm4gY3Vyc29yUG9zO1xuICAgIH1cbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtJZ3hEYXRlVGltZUVkaXRvckRpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtJZ3hEYXRlVGltZUVkaXRvckRpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0ZVRpbWVFZGl0b3JNb2R1bGUgeyB9XG4iXX0=