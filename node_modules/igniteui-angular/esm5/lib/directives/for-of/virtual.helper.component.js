import { __decorate, __extends } from "tslib";
import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { VirtualHelperBaseDirective } from './base.helper.component';
var VirtualHelperComponent = /** @class */ (function (_super) {
    __extends(VirtualHelperComponent, _super);
    function VirtualHelperComponent(elementRef, cdr) {
        var _this = _super.call(this, elementRef, cdr) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.cssClasses = 'igx-vhelper--vertical';
        return _this;
    }
    VirtualHelperComponent.prototype.ngOnInit = function () {
        this.scrollWidth = this.scrollNativeSize;
    };
    VirtualHelperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        HostBinding('scrollTop')
    ], VirtualHelperComponent.prototype, "scrollTop", void 0);
    __decorate([
        HostBinding('style.width.px')
    ], VirtualHelperComponent.prototype, "scrollWidth", void 0);
    __decorate([
        ViewChild('container', { read: ViewContainerRef, static: true })
    ], VirtualHelperComponent.prototype, "_vcr", void 0);
    __decorate([
        Input()
    ], VirtualHelperComponent.prototype, "itemsLength", void 0);
    __decorate([
        HostBinding('class')
    ], VirtualHelperComponent.prototype, "cssClasses", void 0);
    VirtualHelperComponent = __decorate([
        Component({
            selector: 'igx-virtual-helper',
            template: '<div #container class="igx-vhelper__placeholder-content" [style.height.px]="size"></div>'
        })
    ], VirtualHelperComponent);
    return VirtualHelperComponent;
}(VirtualHelperBaseDirective));
export { VirtualHelperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5oZWxwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2Zvci1vZi92aXJ0dWFsLmhlbHBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUMxRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTXJFO0lBQTRDLDBDQUEwQjtJQWNsRSxnQ0FBbUIsVUFBc0IsRUFBUyxHQUFzQjtRQUF4RSxZQUNJLGtCQUFNLFVBQVUsRUFBRSxHQUFHLENBQUMsU0FDekI7UUFGa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFBUyxTQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUZqRSxnQkFBVSxHQUFHLHVCQUF1QixDQUFDOztJQUk1QyxDQUFDO0lBRUQseUNBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQzdDLENBQUM7O2dCQU44QixVQUFVO2dCQUFjLGlCQUFpQjs7SUFaeEU7UUFEQyxXQUFXLENBQUMsV0FBVyxDQUFDOzZEQUNSO0lBR2pCO1FBREMsV0FBVyxDQUFDLGdCQUFnQixDQUFDOytEQUNYO0lBRStDO1FBQWpFLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3dEQUFhO0lBQ3JFO1FBQVIsS0FBSyxFQUFFOytEQUE0QjtJQUlwQztRQURDLFdBQVcsQ0FBQyxPQUFPLENBQUM7OERBQ3VCO0lBWm5DLHNCQUFzQjtRQUpsQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsb0JBQW9CO1lBQzlCLFFBQVEsRUFBRSwwRkFBMEY7U0FDdkcsQ0FBQztPQUNXLHNCQUFzQixDQXFCbEM7SUFBRCw2QkFBQztDQUFBLEFBckJELENBQTRDLDBCQUEwQixHQXFCckU7U0FyQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZixcbiAgICAgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaXJ0dWFsSGVscGVyQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5oZWxwZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtdmlydHVhbC1oZWxwZXInLFxuICAgIHRlbXBsYXRlOiAnPGRpdiAjY29udGFpbmVyIGNsYXNzPVwiaWd4LXZoZWxwZXJfX3BsYWNlaG9sZGVyLWNvbnRlbnRcIiBbc3R5bGUuaGVpZ2h0LnB4XT1cInNpemVcIj48L2Rpdj4nXG59KVxuZXhwb3J0IGNsYXNzIFZpcnR1YWxIZWxwZXJDb21wb25lbnQgZXh0ZW5kcyBWaXJ0dWFsSGVscGVyQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95ICB7XG4gICAgQEhvc3RCaW5kaW5nKCdzY3JvbGxUb3AnKVxuICAgIHB1YmxpYyBzY3JvbGxUb3A7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoLnB4JylcbiAgICBwdWJsaWMgc2Nyb2xsV2lkdGg7XG5cbiAgICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgX3ZjcjtcbiAgICBASW5wdXQoKSBwdWJsaWMgaXRlbXNMZW5ndGg6IG51bWJlcjtcblxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gICAgcHVibGljIGNzc0NsYXNzZXMgPSAnaWd4LXZoZWxwZXItLXZlcnRpY2FsJztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCBjZHIpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnNjcm9sbFdpZHRoID0gdGhpcy5zY3JvbGxOYXRpdmVTaXplO1xuICAgIH1cbn1cbiJdfQ==