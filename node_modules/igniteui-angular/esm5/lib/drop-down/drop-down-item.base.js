import { __decorate, __param } from "tslib";
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { Directive, Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';
import { IgxSelectionAPIService } from '../core/selection';
import { showMessage } from '../core/deprecateDecorators';
import { IgxDropDownGroupComponent } from './drop-down-group.component';
var NEXT_ID = 0;
var warningShown = false;
/**
 * An abstract class defining a drop-down item:
 * With properties / styles for selection, highlight, height
 * Bindable property for passing data (`value: any`)
 * Parent component (has to be used under a parent with type `IDropDownBase`)
 * Method for handling click on Host()
 */
var IgxDropDownItemBaseDirective = /** @class */ (function () {
    function IgxDropDownItemBaseDirective(dropDown, elementRef, group, selection) {
        this.dropDown = dropDown;
        this.elementRef = elementRef;
        this.group = group;
        this.selection = selection;
        /**
         * @hidden
         */
        this._focused = false;
        this._selected = false;
        this._index = null;
        this._disabled = false;
        /**
         * Sets/gets the `id` of the item.
         * ```html
         * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>
         * ```
         * ```typescript
         * let itemId =  this.item.id;
         * ```
         * @memberof IgxSelectItemComponent
         */
        this.id = "igx-drop-down-item-" + NEXT_ID++;
        /**
         * @hidden
         */
        this.selectedChange = new EventEmitter();
        /**
         * Gets/sets the `role` attribute of the item. Default is 'option'.
         *
         * ```html
         *  <igx-drop-down-item [role]="customRole"></igx-drop-down-item>
         * ```
         */
        this.role = 'option';
    }
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "hasIndex", {
        get: function () {
            return this._index !== null && this._index !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "itemID", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "index", {
        /**
         * The data index of the dropdown item.
         *
         * ```typescript
         * // get the data index of the selected dropdown item
         * let selectedItemIndex = this.dropdown.selectedItem.index
         * ```
         */
        get: function () {
            if (this._index === null) {
                warningShown = showMessage('IgxDropDownItemBaseDirective: Automatic index is deprecated.' +
                    'Bind in the template instead using `<igx-drop-down-item [index]="i"` instead.`', warningShown);
                return this.itemIndex;
            }
            return this._index;
        },
        set: function (value) {
            this._index = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "itemStyle", {
        /**
         * @hidden @internal
         */
        get: function () {
            return !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "itemStyleCosy", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.dropDown.displayDensity === 'cosy' && !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "itemStyleCompact", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.dropDown.displayDensity === 'compact' && !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "selected", {
        /**
         * Sets/Gets if the item is the currently selected one in the dropdown
         *
         * ```typescript
         *  let mySelectedItem = this.dropdown.selectedItem;
         *  let isMyItemSelected = mySelectedItem.selected; // true
         * ```
         *
         * Two-way data binding
         * ```html
         * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>
         * ```
         */
        get: function () {
            return this._selected;
        },
        set: function (value) {
            if (this.isHeader) {
                return;
            }
            this._selected = value;
            this.selectedChange.emit(this._selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "focused", {
        /**
         * Sets/gets if the given item is focused
         * ```typescript
         *  let mySelectedItem = this.dropdown.selectedItem;
         *  let isMyItemFocused = mySelectedItem.focused;
         * ```
         */
        get: function () {
            return this.isSelectable && this._focused;
        },
        /**
         * ```html
         *  <igx-drop-down-item *ngFor="let item of items" focused={{!item.focused}}>
         *      <div>
         *          {{item.field}}
         *      </div>
         *  </igx-drop-down-item>
         * ```
         */
        set: function (value) {
            this._focused = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "headerClassCosy", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.isHeader && this.dropDown.displayDensity === 'cosy';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "headerClassCompact", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.isHeader && this.dropDown.displayDensity === 'compact';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "disabled", {
        /**
         * Sets/gets if the given item is disabled
         *
         * ```typescript
         *  // get
         *  let mySelectedItem = this.dropdown.selectedItem;
         *  let myItemIsDisabled = mySelectedItem.disabled;
         * ```
         *
         * ```html
         *  <igx-drop-down-item *ngFor="let item of items" disabled={{!item.disabled}}>
         *      <div>
         *          {{item.field}}
         *      </div>
         *  </igx-drop-down-item>
         * ```
         * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled
         */
        get: function () {
            return this.group ? this.group.disabled || this._disabled : this._disabled;
        },
        set: function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "itemIndex", {
        /**
         * Gets item index
         * @hidden @internal
         */
        get: function () {
            return this.dropDown.items.indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "elementHeight", {
        /**
         * Gets item element height
         * @hidden @internal
         */
        get: function () {
            return this.elementRef.nativeElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "element", {
        /**
         * Get item html element
         * @hidden @internal
         */
        get: function () {
            return this.elementRef;
        },
        enumerable: true,
        configurable: true
    });
    IgxDropDownItemBaseDirective.prototype.ngDoCheck = function () {
        if (this._selected) {
            var dropDownSelectedItem = this.dropDown.selectedItem;
            if (!dropDownSelectedItem) {
                this.dropDown.selectItem(this);
            }
            else if (this.hasIndex
                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :
                this !== dropDownSelectedItem) {
                this.dropDown.selectItem(this);
            }
        }
    };
    Object.defineProperty(IgxDropDownItemBaseDirective.prototype, "isSelectable", {
        /** Returns true if the items is not a header or disabled  */
        get: function () {
            return !(this.disabled || this.isHeader);
        },
        enumerable: true,
        configurable: true
    });
    /** If `allowItemsFocus` is enabled, keep the browser focus on the active item */
    IgxDropDownItemBaseDirective.prototype.ensureItemFocus = function () {
        if (this.dropDown.allowItemsFocus) {
            var focusedItem = this.dropDown.items.find(function (item) { return item.focused; });
            if (!focusedItem) {
                return;
            }
            focusedItem.element.nativeElement.focus({ preventScroll: true });
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxDropDownItemBaseDirective.prototype.clicked = function (event) {
    };
    IgxDropDownItemBaseDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_DROPDOWN_BASE,] }] },
        { type: ElementRef },
        { type: IgxDropDownGroupComponent, decorators: [{ type: Optional }] },
        { type: IgxSelectionAPIService, decorators: [{ type: Optional }, { type: Inject, args: [IgxSelectionAPIService,] }] }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxDropDownItemBaseDirective.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxDropDownItemBaseDirective.prototype, "index", null);
    __decorate([
        Input()
    ], IgxDropDownItemBaseDirective.prototype, "value", void 0);
    __decorate([
        HostBinding('class.igx-drop-down__item')
    ], IgxDropDownItemBaseDirective.prototype, "itemStyle", null);
    __decorate([
        HostBinding('class.igx-drop-down__item--cosy')
    ], IgxDropDownItemBaseDirective.prototype, "itemStyleCosy", null);
    __decorate([
        HostBinding('class.igx-drop-down__item--compact')
    ], IgxDropDownItemBaseDirective.prototype, "itemStyleCompact", null);
    __decorate([
        Input(),
        HostBinding('attr.aria-selected'),
        HostBinding('class.igx-drop-down__item--selected')
    ], IgxDropDownItemBaseDirective.prototype, "selected", null);
    __decorate([
        Output()
    ], IgxDropDownItemBaseDirective.prototype, "selectedChange", void 0);
    __decorate([
        HostBinding('class.igx-drop-down__item--focused')
    ], IgxDropDownItemBaseDirective.prototype, "focused", null);
    __decorate([
        Input(),
        HostBinding('class.igx-drop-down__header')
    ], IgxDropDownItemBaseDirective.prototype, "isHeader", void 0);
    __decorate([
        HostBinding('class.igx-drop-down__header--cosy')
    ], IgxDropDownItemBaseDirective.prototype, "headerClassCosy", null);
    __decorate([
        HostBinding('class.igx-drop-down__header--compact')
    ], IgxDropDownItemBaseDirective.prototype, "headerClassCompact", null);
    __decorate([
        Input(),
        HostBinding('attr.aria-disabled'),
        HostBinding('class.igx-drop-down__item--disabled')
    ], IgxDropDownItemBaseDirective.prototype, "disabled", null);
    __decorate([
        Input(),
        HostBinding('attr.role')
    ], IgxDropDownItemBaseDirective.prototype, "role", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxDropDownItemBaseDirective.prototype, "clicked", null);
    IgxDropDownItemBaseDirective = __decorate([
        Directive({
            selector: '[igxDropDownItemBase]'
        }),
        __param(0, Inject(IGX_DROPDOWN_BASE)),
        __param(2, Optional()),
        __param(3, Optional()), __param(3, Inject(IgxSelectionAPIService))
    ], IgxDropDownItemBaseDirective);
    return IgxDropDownItemBaseDirective;
}());
export { IgxDropDownItemBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLWl0ZW0uYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHJvcC1kb3duL2Ryb3AtZG93bi1pdGVtLmJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pJLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNELE9BQU8sRUFBcUIsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFeEUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQztBQUV6Qjs7Ozs7O0dBTUc7QUFJSDtJQXFRSSxzQ0FDeUMsUUFBdUIsRUFDbEQsVUFBc0IsRUFDVixLQUFnQyxFQUNBLFNBQWtDO1FBSG5ELGFBQVEsR0FBUixRQUFRLENBQWU7UUFDbEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNWLFVBQUssR0FBTCxLQUFLLENBQTJCO1FBQ0EsY0FBUyxHQUFULFNBQVMsQ0FBeUI7UUF4UTVGOztXQUVHO1FBQ08sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBSzVCOzs7Ozs7Ozs7V0FTRztRQUdJLE9BQUUsR0FBRyx3QkFBc0IsT0FBTyxFQUFJLENBQUM7UUF5RzlDOztXQUVHO1FBRUksbUJB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Q0FBQztrRUFDbEI7SUFNekI7UUFEQyxXQUFXLENBQUMsbUNBQW1DLENBQUM7dUVBR2hEO0lBTUQ7UUFEQyxXQUFXLENBQUMsc0NBQXNDLENBQUM7MEVBR25EO0lBdUJEO1FBSEMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1FBQ2pDLFdBQVcsQ0FBQyxxQ0FBcUMsQ0FBQztnRUFHbEQ7SUFlRDtRQUZDLEtBQUssRUFBRTtRQUNQLFdBQVcsQ0FBQyxXQUFXLENBQUM7OERBQ0Y7SUFpRXZCO1FBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOytEQUVqQztJQTdTUSw0QkFBNEI7UUFIeEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHVCQUF1QjtTQUNwQyxDQUFDO1FBdVFPLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFFekIsV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO09BelF0Qyw0QkFBNEIsQ0E4U3hDO0lBQUQsbUNBQUM7Q0FBQSxBQTlTRCxJQThTQztTQTlTWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRHJvcERvd25CYXNlLCBJR1hfRFJPUERPV05fQkFTRSB9IGZyb20gJy4vZHJvcC1kb3duLmNvbW1vbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBFbGVtZW50UmVmLCBPcHRpb25hbCwgSW5qZWN0LCBEb0NoZWNrLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4U2VsZWN0aW9uQVBJU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VsZWN0aW9uJztcbmltcG9ydCB7IERlcHJlY2F0ZVByb3BlcnR5LCBzaG93TWVzc2FnZSB9IGZyb20gJy4uL2NvcmUvZGVwcmVjYXRlRGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wLWRvd24tZ3JvdXAuY29tcG9uZW50JztcblxubGV0IE5FWFRfSUQgPSAwO1xubGV0IHdhcm5pbmdTaG93biA9IGZhbHNlO1xuXG4vKipcbiAqIEFuIGFic3RyYWN0IGNsYXNzIGRlZmluaW5nIGEgZHJvcC1kb3duIGl0ZW06XG4gKiBXaXRoIHByb3BlcnRpZXMgLyBzdHlsZXMgZm9yIHNlbGVjdGlvbiwgaGlnaGxpZ2h0LCBoZWlnaHRcbiAqIEJpbmRhYmxlIHByb3BlcnR5IGZvciBwYXNzaW5nIGRhdGEgKGB2YWx1ZTogYW55YClcbiAqIFBhcmVudCBjb21wb25lbnQgKGhhcyB0byBiZSB1c2VkIHVuZGVyIGEgcGFyZW50IHdpdGggdHlwZSBgSURyb3BEb3duQmFzZWApXG4gKiBNZXRob2QgZm9yIGhhbmRsaW5nIGNsaWNrIG9uIEhvc3QoKVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcm9wRG93bkl0ZW1CYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RHJvcERvd25JdGVtQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2ZvY3VzZWQgPSBmYWxzZTtcbiAgICBwcm90ZWN0ZWQgX3NlbGVjdGVkID0gZmFsc2U7XG4gICAgcHJvdGVjdGVkIF9pbmRleCA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHByb3RlY3RlZCBnZXQgaGFzSW5kZXgoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbmRleCAhPT0gbnVsbCAmJiB0aGlzLl9pbmRleCAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGlkYCBvZiB0aGUgaXRlbS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kcm9wLWRvd24taXRlbSBbaWRdID0gJ2lneC1kcm9wLWRvd24taXRlbS0wJz48L2lneC1kcm9wLWRvd24taXRlbT5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGl0ZW1JZCA9ICB0aGlzLml0ZW0uaWQ7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneFNlbGVjdEl0ZW1Db21wb25lbnRcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGlkID0gYGlneC1kcm9wLWRvd24taXRlbS0ke05FWFRfSUQrK31gO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGl0ZW1JRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGEgaW5kZXggb2YgdGhlIGRyb3Bkb3duIGl0ZW0uXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogLy8gZ2V0IHRoZSBkYXRhIGluZGV4IG9mIHRoZSBzZWxlY3RlZCBkcm9wZG93biBpdGVtXG4gICAgICogbGV0IHNlbGVjdGVkSXRlbUluZGV4ID0gdGhpcy5kcm9wZG93bi5zZWxlY3RlZEl0ZW0uaW5kZXhcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgaW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICB3YXJuaW5nU2hvd24gPSBzaG93TWVzc2FnZShcbiAgICAgICAgICAgICAgICAnSWd4RHJvcERvd25JdGVtQmFzZURpcmVjdGl2ZTogQXV0b21hdGljIGluZGV4IGlzIGRlcHJlY2F0ZWQuJyArXG4gICAgICAgICAgICAgICAgJ0JpbmQgaW4gdGhlIHRlbXBsYXRlIGluc3RlYWQgdXNpbmcgYDxpZ3gtZHJvcC1kb3duLWl0ZW0gW2luZGV4XT1cImlcImAgaW5zdGVhZC5gJyxcbiAgICAgICAgICAgICAgICB3YXJuaW5nU2hvd24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbmRleDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGluZGV4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSB2YWx1ZSBvZiB0aGUgaXRlbSBpZiB0aGUgaXRlbSBpcyBkYXRhYm91bmRcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyB1c2FnZSBpbiBJZ3hEcm9wRG93bkl0ZW1Db21wb25lbnRcbiAgICAgKiAvLyBnZXRcbiAgICAgKiBsZXQgbXlTZWxlY3RlZEl0ZW1WYWx1ZSA9IHRoaXMuZHJvcGRvd24uc2VsZWN0ZWRJdGVtLnZhbHVlO1xuICAgICAqXG4gICAgICogLy8gc2V0XG4gICAgICogbGV0IG15U2VsZWN0ZWRJdGVtID0gdGhpcy5kcm9wZG93bi5zZWxlY3RlZEl0ZW07XG4gICAgICogbXlTZWxlY3RlZEl0ZW0udmFsdWUgPSB7IGlkOiAxMjMsIG5hbWU6ICdFeGFtcGxlIE5hbWUnIH1cbiAgICAgKlxuICAgICAqIC8vIHVzYWdlIGluIElneENvbWJvSXRlbUNvbXBvbmVudFxuICAgICAqIC8vIGdldFxuICAgICAqIGxldCBteUNvbWJvSXRlbVZhbHVlID0gdGhpcy5jb21iby5pdGVtc1swXS52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB2YWx1ZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2l0ZW0nKVxuICAgIGdldCBpdGVtU3R5bGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0hlYWRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRyb3AtZG93bl9faXRlbS0tY29zeScpXG4gICAgcHVibGljIGdldCBpdGVtU3R5bGVDb3N5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcm9wRG93bi5kaXNwbGF5RGVuc2l0eSA9PT0gJ2Nvc3knICYmICF0aGlzLmlzSGVhZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZHJvcC1kb3duX19pdGVtLS1jb21wYWN0JylcbiAgICBwdWJsaWMgZ2V0IGl0ZW1TdHlsZUNvbXBhY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRyb3BEb3duLmRpc3BsYXlEZW5zaXR5ID09PSAnY29tcGFjdCcgJiYgIXRoaXMuaXNIZWFkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cy9HZXRzIGlmIHRoZSBpdGVtIGlzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgb25lIGluIHRoZSBkcm9wZG93blxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBsZXQgbXlTZWxlY3RlZEl0ZW0gPSB0aGlzLmRyb3Bkb3duLnNlbGVjdGVkSXRlbTtcbiAgICAgKiAgbGV0IGlzTXlJdGVtU2VsZWN0ZWQgPSBteVNlbGVjdGVkSXRlbS5zZWxlY3RlZDsgLy8gdHJ1ZVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVHdvLXdheSBkYXRhIGJpbmRpbmdcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kcm9wLWRvd24taXRlbSBbKHNlbGVjdGVkKV09J21vZGVsLmlzU2VsZWN0ZWQnPjwvaWd4LWRyb3AtZG93bi1pdGVtPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtc2VsZWN0ZWQnKVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRyb3AtZG93bl9faXRlbS0tc2VsZWN0ZWQnKVxuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICAgIH1cblxuICAgIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5pc0hlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFuZ2UuZW1pdCh0aGlzLl9zZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBzZWxlY3RlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyBpZiB0aGUgZ2l2ZW4gaXRlbSBpcyBmb2N1c2VkXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBsZXQgbXlTZWxlY3RlZEl0ZW0gPSB0aGlzLmRyb3Bkb3duLnNlbGVjdGVkSXRlbTtcbiAgICAgKiAgbGV0IGlzTXlJdGVtRm9jdXNlZCA9IG15U2VsZWN0ZWRJdGVtLmZvY3VzZWQ7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZHJvcC1kb3duX19pdGVtLS1mb2N1c2VkJylcbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTZWxlY3RhYmxlICYmIHRoaXMuX2ZvY3VzZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWRyb3AtZG93bi1pdGVtICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCIgZm9jdXNlZD17eyFpdGVtLmZvY3VzZWR9fT5cbiAgICAgKiAgICAgIDxkaXY+XG4gICAgICogICAgICAgICAge3tpdGVtLmZpZWxkfX1cbiAgICAgKiAgICAgIDwvZGl2PlxuICAgICAqICA8L2lneC1kcm9wLWRvd24taXRlbT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgZm9jdXNlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9mb2N1c2VkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIGlmIHRoZSBnaXZlbiBpdGVtIGlzIGhlYWRlclxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgLy8gZ2V0XG4gICAgICogIGxldCBteVNlbGVjdGVkSXRlbSA9IHRoaXMuZHJvcGRvd24uc2VsZWN0ZWRJdGVtO1xuICAgICAqICBsZXQgaXNNeUl0ZW1IZWFkZXIgPSBteVNlbGVjdGVkSXRlbS5pc0hlYWRlcjtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPCEtLXNldC0tPlxuICAgICAqICA8aWd4LWRyb3AtZG93bi1pdGVtICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCI+XG4gICAgICogICAgICA8ZGl2ICpuZ0lmPVwiaXRlbXMuaW5kZXhPZihpdGVtKSA9PT0gNTsgdGhlbiBpdGVtLmlzSGVhZGVyID0gdHJ1ZVwiPlxuICAgICAqICAgICAgICAgIHt7aXRlbS5maWVsZH19XG4gICAgICogICAgICA8L2Rpdj5cbiAgICAgKiAgPC9pZ3gtZHJvcC1kb3duLWl0ZW0+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2hlYWRlcicpXG4gICAgcHVibGljIGlzSGVhZGVyOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2hlYWRlci0tY29zeScpXG4gICAgcHVibGljIGdldCBoZWFkZXJDbGFzc0Nvc3koKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSGVhZGVyICYmIHRoaXMuZHJvcERvd24uZGlzcGxheURlbnNpdHkgPT09ICdjb3N5JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRyb3AtZG93bl9faGVhZGVyLS1jb21wYWN0JylcbiAgICBwdWJsaWMgZ2V0IGhlYWRlckNsYXNzQ29tcGFjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIZWFkZXIgJiYgdGhpcy5kcm9wRG93bi5kaXNwbGF5RGVuc2l0eSA9PT0gJ2NvbXBhY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyBpZiB0aGUgZ2l2ZW4gaXRlbSBpcyBkaXNhYmxlZFxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAvLyBnZXRcbiAgICAgKiAgbGV0IG15U2VsZWN0ZWRJdGVtID0gdGhpcy5kcm9wZG93bi5zZWxlY3RlZEl0ZW07XG4gICAgICogIGxldCBteUl0ZW1Jc0Rpc2FibGVkID0gbXlTZWxlY3RlZEl0ZW0uZGlzYWJsZWQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtZHJvcC1kb3duLWl0ZW0gKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIiBkaXNhYmxlZD17eyFpdGVtLmRpc2FibGVkfX0+XG4gICAgICogICAgICA8ZGl2PlxuICAgICAqICAgICAgICAgIHt7aXRlbS5maWVsZH19XG4gICAgICogICAgICA8L2Rpdj5cbiAgICAgKiAgPC9pZ3gtZHJvcC1kb3duLWl0ZW0+XG4gICAgICogYGBgXG4gICAgICogKipOT1RFOioqIERyb3AtZG93biBpdGVtcyBpbnNpZGUgb2YgYSBkaXNhYmxlZCBgSWd4RHJvcERvd25Hcm91cGAgd2lsbCBhbHdheXMgY291bnQgYXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWRpc2FibGVkJylcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2l0ZW0tLWRpc2FibGVkJylcbiAgICBwdWJsaWMgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ncm91cCA/IHRoaXMuZ3JvdXAuZGlzYWJsZWQgfHwgdGhpcy5fZGlzYWJsZWQgOiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBgcm9sZWAgYXR0cmlidXRlIG9mIHRoZSBpdGVtLiBEZWZhdWx0IGlzICdvcHRpb24nLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWRyb3AtZG93bi1pdGVtIFtyb2xlXT1cImN1c3RvbVJvbGVcIj48L2lneC1kcm9wLWRvd24taXRlbT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgICBwdWJsaWMgcm9sZSA9ICdvcHRpb24nO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBpdGVtIGluZGV4XG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGl0ZW1JbmRleCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5kcm9wRG93bi5pdGVtcy5pbmRleE9mKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgaXRlbSBlbGVtZW50IGhlaWdodFxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBlbGVtZW50SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGl0ZW0gaHRtbCBlbGVtZW50XG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGVsZW1lbnQoKTogRWxlbWVudFJlZiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWY7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoSUdYX0RST1BET1dOX0JBU0UpIHByb3RlY3RlZCBkcm9wRG93bjogSURyb3BEb3duQmFzZSxcbiAgICAgICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBncm91cDogSWd4RHJvcERvd25Hcm91cENvbXBvbmVudCxcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChJZ3hTZWxlY3Rpb25BUElTZXJ2aWNlKSBwcm90ZWN0ZWQgc2VsZWN0aW9uPzogSWd4U2VsZWN0aW9uQVBJU2VydmljZVxuICAgICkgeyB9XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgZHJvcERvd25TZWxlY3RlZEl0ZW0gPSB0aGlzLmRyb3BEb3duLnNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgIGlmICghZHJvcERvd25TZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3BEb3duLnNlbGVjdEl0ZW0odGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaGFzSW5kZXhcbiAgICAgICAgICAgICAgICA/IHRoaXMuX2luZGV4ICE9PSBkcm9wRG93blNlbGVjdGVkSXRlbS5pbmRleCB8fCB0aGlzLnZhbHVlICE9PSBkcm9wRG93blNlbGVjdGVkSXRlbS52YWx1ZSA6XG4gICAgICAgICAgICAgICAgdGhpcyAhPT0gZHJvcERvd25TZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3BEb3duLnNlbGVjdEl0ZW0odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBpdGVtcyBpcyBub3QgYSBoZWFkZXIgb3IgZGlzYWJsZWQgICovXG4gICAgcHJvdGVjdGVkIGdldCBpc1NlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAgISh0aGlzLmRpc2FibGVkIHx8IHRoaXMuaXNIZWFkZXIpO1xuICAgIH1cblxuICAgIC8qKiBJZiBgYWxsb3dJdGVtc0ZvY3VzYCBpcyBlbmFibGVkLCBrZWVwIHRoZSBicm93c2VyIGZvY3VzIG9uIHRoZSBhY3RpdmUgaXRlbSAqL1xuICAgIHByb3RlY3RlZCBlbnN1cmVJdGVtRm9jdXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmRyb3BEb3duLmFsbG93SXRlbXNGb2N1cykge1xuICAgICAgICAgICAgY29uc3QgZm9jdXNlZEl0ZW0gPSB0aGlzLmRyb3BEb3duLml0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uZm9jdXNlZCk7XG4gICAgICAgICAgICBpZiAoIWZvY3VzZWRJdGVtKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgZm9jdXNlZEl0ZW0uZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgY2xpY2tlZChldmVudCk6IHZvaWQge1xuICAgIH1cbn1cbiJdfQ==