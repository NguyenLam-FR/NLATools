import { AfterViewInit, ElementRef, EventEmitter, QueryList, OnDestroy, NgZone } from '@angular/core';
import { IgxTabItemComponent } from './tab-item.component';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabsBase, IgxTabItemBase } from './tabs.common';
import { PlatformUtil } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tabs-group.component';
import * as ɵngcc2 from './tab-item.component';
import * as ɵngcc3 from './tabs.directives';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../badge/badge.component';
import * as ɵngcc6 from '../icon/public_api';
import * as ɵngcc7 from '../directives/ripple/ripple.directive';
export declare enum IgxTabsType {
    FIXED = "fixed",
    CONTENTFIT = "contentfit"
}
export declare class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {
    private _element;
    private _ngZone;
    private platformUtil;
    private _currentTabsId;
    /**
     * Provides an observable collection of all `IgxTabsGroupComponent`s.
     * ```typescript
     * const groupItems = this.myTabComponent.groups;
     * ```
     */
    groups: QueryList<IgxTabsGroupComponent>;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.
     * ```typescript
     * const tabItems = this.myTabComponent.contentTabs;
     * ```
     */
    contentTabs: QueryList<IgxTabItemComponent>;
    /**
     * An @Input property that sets the value of the `selectedIndex`.
     * Default value is 0.
     * ```html
     * <igx-tabs selectedIndex="1">
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-tabs [(selectedIndex)]="model.selectedIndex">
     * ```
     */
    get selectedIndex(): number;
    set selectedIndex(index: number);
    /**
     * @hidden
     */
    selectedIndexChange: EventEmitter<number>;
    /**
     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
     * By default the header sizing mode is `contentfit`.
     * ```html
     * <igx-tabs type="fixed">
     *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
     * </igx-tabs>
     * ```
     */
    type: string | IgxTabsType;
    /**
     * Sets/gets the `id` of the tabs.
     *
     * @remarks
     * If not set, the `id` will have value `"igx-tabs-0"`.
     *
     * @example
     * ```html
     * <igx-tabs id="my-first-tabs"></igx-tabs>
     * ```
     * @memberof IgxTabsComponent
     */
    id: string;
    /**
     * @hidden
     */
    class: string;
    /**
     * Emitted when a tab item is deselected.
     * ```html
     * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemDeselected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     */
    onTabItemDeselected: EventEmitter<any>;
    /**
     * Emitted when a tab item is selected.
     * ```html
     * <igx-tabs (onTabItemSelected)="itemSelected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemSelected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     */
    onTabItemSelected: EventEmitter<any>;
    /**
     * @hidden
     */
    contentsContainer: ElementRef;
    /**
     * @hidden
     */
    headerContainer: ElementRef;
    /**
     * @hidden
     */
    itemsContainer: ElementRef;
    /**
     * @hidden
     */
    selectedIndicator: ElementRef;
    /**
     * @hidden
     */
    tabsContainer: ElementRef;
    /**
     * @hidden
     */
    viewPort: ElementRef;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * ```typescript
     * const tabItems = this.myTabComponent.viewTabs;
     * ```
     */
    viewTabs: QueryList<IgxTabItemComponent>;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * First try to get them as content children if not available get them as view children.
     * ```typescript
     * const tabItems = this.myTabComponent.tabs;
     * ```
     */
    get tabs(): QueryList<IgxTabItemComponent>;
    /**
     * @hidden
     */
    get hasContentTabs(): boolean;
    /**
     * @hidden
     */
    calculatedWidth: number;
    /**
     * @hidden
     */
    visibleItemsWidth: number;
    /**
     * @hidden
     */
    offset: number;
    private _groupChanges$;
    private _selectedIndex;
    private _resizeObserver;
    /**
     * @hidden
     */
    get cssClass(): string;
    /**
     * @hidden
     */
    scrollLeft(event: any): void;
    /**
     * @hidden
     */
    scrollRight(event: any): void;
    /**
     * @hidden
     */
    scrollElement(element: any, scrollRight: boolean): void;
    /**
     * Gets the selected `IgxTabItemComponent`.
     * ```
     * const selectedItem = this.myTabComponent.selectedTabItem;
     * ```
     */
    get selectedTabItem(): IgxTabItemComponent;
    constructor(_element: ElementRef, _ngZone: NgZone, platformUtil: PlatformUtil);
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    private setGroupsAttributes;
    private resetSelectionOnCollectionChanged;
    private scroll;
    /**
     * @hidden
     */
    performSelectionChange(newTab: IgxTabItemBase): void;
    private performDeselection;
    private performSelection;
    private bringNewTabIntoView;
    /**
     * @hidden
     */
    getTabItemId(index: number): string;
    /**
     * @hidden
     */
    getTabsGroupId(index: number): string;
    /**
     * @hidden
     */
    transformContentAnimation(tab: IgxTabItemBase, duration: number): void;
    /**
     * @hidden
     */
    transformIndicatorAnimation(element: HTMLElement, duration?: number): void;
    hideIndicator(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTabsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTabsComponent, "igx-tabs", never, { "type": "type"; "id": "id"; "class": "class"; "selectedIndex": "selectedIndex"; }, { "selectedIndexChange": "selectedIndexChange"; "onTabItemDeselected": "onTabItemDeselected"; "onTabItemSelected": "onTabItemSelected"; }, ["groups", "contentTabs"], ["igx-tab-item", "*"]>;
}
/**
 * @hidden
 */
export declare class IgxTabsModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxTabsModule, [typeof IgxTabsComponent, typeof ɵngcc1.IgxTabsGroupComponent, typeof ɵngcc2.IgxTabItemComponent, typeof ɵngcc3.IgxTabItemTemplateDirective, typeof ɵngcc3.IgxRightButtonStyleDirective, typeof ɵngcc3.IgxLeftButtonStyleDirective], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.IgxBadgeModule, typeof ɵngcc6.IgxIconModule, typeof ɵngcc7.IgxRippleModule], [typeof IgxTabsComponent, typeof ɵngcc1.IgxTabsGroupComponent, typeof ɵngcc2.IgxTabItemComponent, typeof ɵngcc3.IgxTabItemTemplateDirective, typeof ɵngcc3.IgxRightButtonStyleDirective, typeof ɵngcc3.IgxLeftButtonStyleDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxTabsModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,