import { ElementRef, TemplateRef, NgZone, AfterViewInit, OnDestroy } from '@angular/core';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabItemBase, IgxTabsBase } from './tabs.common';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {
    private _tabs;
    private _element;
    private _ngZone;
    /**
     * Gets the group associated with the tab.
     * ```html
     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;
     * ```
     */
    relatedGroup: IgxTabsGroupComponent;
    /** @hidden */
    private _icon;
    /**
     * An @Input property that sets the value of the `icon`.
     * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.
     * ```html
     * <igx-tab-item label="Tab 1" icon="home">
     * ```
     */
    get icon(): string;
    set icon(newValue: string);
    /** @hidden */
    private _label;
    /**
     * An @Input property that sets the value of the `label`.
     * ```html
     * <igx-tabs-item label="Tab 2" icon="folder">
     * ```
     */
    get label(): string;
    set label(newValue: string);
    /**
     * @hidden @internal
     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.
     */
    autoGenerated: boolean;
    /** @hidden */
    protected defaultTabTemplate: TemplateRef<any>;
    /** @hidden */
    protected customTabTemplateDir: IgxTabItemTemplateDirective;
    private _nativeTabItem;
    private _changesCount;
    private _isSelected;
    private _disabled;
    private _resizeObserver;
    constructor(_tabs: IgxTabsBase, _element: ElementRef, _ngZone: NgZone);
    get provideCssClassSelected(): boolean;
    get provideCssClassDisabled(): boolean;
    get provideCssClass(): boolean;
    /**
     * @hidden @internal
     */
    role: string;
    /**
     * @hidden @internal
     */
    tabindex: number;
    /**
     * @hidden @internal
     */
    ariaLabel: string;
    /**
     * @hidden @internal
     */
    ariaDisabled: boolean;
    /**
     * @hidden @internal
     */
    ariaSelected: boolean;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onClick(event: any): void;
    /**
     * @hidden
     */
    onKeydown(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    get changesCount(): number;
    /**
     * @hidden
     */
    get nativeTabItem(): ElementRef;
    /**
     * 	Gets whether the tab is disabled.
     * ```
     * const disabledItem = this.myTabComponent.tabs.first.disabled;
     * ```
     */
    get disabled(): boolean;
    set disabled(newValue: boolean);
    /**
     * Gets whether the tab is selected.
     * ```typescript
     * const selectedItem = this.myTabComponent.tabs.first.isSelected;
     * ```
     */
    get isSelected(): boolean;
    set isSelected(newValue: boolean);
    /**
     * @hidden
     */
    select(): void;
    /**
     * @hidden
     */
    get index(): number;
    /**
     * @hidden
     */
    setSelectedInternal(newValue: boolean): void;
    /**
     * @hidden
     */
    get template(): TemplateRef<any>;
    /**
     * @hidden
     */
    get context(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTabItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTabItemComponent, "igx-tab-item", never, { "icon": "icon"; "label": "label"; "disabled": "disabled"; "isSelected": "isSelected"; "relatedGroup": "relatedGroup"; "autoGenerated": "autoGenerated"; }, {}, ["customTabTemplateDir"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWl0ZW0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYi1pdGVtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmLCBOZ1pvbmUsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4VGFic0dyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi90YWJzLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hUYWJJdGVtQmFzZSwgSWd4VGFic0Jhc2UgfSBmcm9tICcuL3RhYnMuY29tbW9uJztcbmltcG9ydCB7IElneFRhYkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdGFicy5kaXJlY3RpdmVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRhYkl0ZW1Db21wb25lbnQgZXh0ZW5kcyBJZ3hUYWJJdGVtQmFzZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfdGFicztcbiAgICBwcml2YXRlIF9lbGVtZW50O1xuICAgIHByaXZhdGUgX25nWm9uZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBncm91cCBhc3NvY2lhdGVkIHdpdGggdGhlIHRhYi5cbiAgICAgKiBgYGBodG1sXG4gICAgICogY29uc3QgcmVsYXRlZEdyb3VwID0gdGhpcy50YWJiYXIudGFicy50b0FycmF5KClbMV0ucmVsYXRlZEdyb3VwO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlbGF0ZWRHcm91cDogSWd4VGFic0dyb3VwQ29tcG9uZW50O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJpdmF0ZSBfaWNvbjtcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGljb25gLlxuICAgICAqIFRoZSB2YWx1ZSBzaG91bGQgYmUgdmFsaWQgaWNvbiBuYW1lIGZyb20ge0BsaW5rIGh0dHBzOi8vbWF0ZXJpYWwuaW8vdG9vbHMvaWNvbnMvP3N0eWxlPWJhc2VsaW5lfS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC10YWItaXRlbSBsYWJlbD1cIlRhYiAxXCIgaWNvbj1cImhvbWVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaWNvbigpOiBzdHJpbmc7XG4gICAgc2V0IGljb24obmV3VmFsdWU6IHN0cmluZyk7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcml2YXRlIF9sYWJlbDtcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGxhYmVsYC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC10YWJzLWl0ZW0gbGFiZWw9XCJUYWIgMlwiIGljb249XCJmb2xkZXJcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgbGFiZWwoKTogc3RyaW5nO1xuICAgIHNldCBsYWJlbChuZXdWYWx1ZTogc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqIFNldCB0byB0cnVlIHdoZW4gdGhlIHRhYiBpdGVtIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gdGhlIElneFRhYnNDb21wb25lbnQgd2hlbiB0YWIgZ3JvdXBzIGFyZSBkZWZpbmVkLlxuICAgICAqL1xuICAgIGF1dG9HZW5lcmF0ZWQ6IGJvb2xlYW47XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdFRhYlRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIGN1c3RvbVRhYlRlbXBsYXRlRGlyOiBJZ3hUYWJJdGVtVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgcHJpdmF0ZSBfbmF0aXZlVGFiSXRlbTtcbiAgICBwcml2YXRlIF9jaGFuZ2VzQ291bnQ7XG4gICAgcHJpdmF0ZSBfaXNTZWxlY3RlZDtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICBwcml2YXRlIF9yZXNpemVPYnNlcnZlcjtcbiAgICBjb25zdHJ1Y3RvcihfdGFiczogSWd4VGFic0Jhc2UsIF9lbGVtZW50OiBFbGVtZW50UmVmLCBfbmdab25lOiBOZ1pvbmUpO1xuICAgIGdldCBwcm92aWRlQ3NzQ2xhc3NTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIGdldCBwcm92aWRlQ3NzQ2xhc3NEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIGdldCBwcm92aWRlQ3NzQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFyaWFEaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFyaWFTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgY2hhbmdlc0NvdW50KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IG5hdGl2ZVRhYkl0ZW0oKTogRWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAgKiBcdEdldHMgd2hldGhlciB0aGUgdGFiIGlzIGRpc2FibGVkLlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGRpc2FibGVkSXRlbSA9IHRoaXMubXlUYWJDb21wb25lbnQudGFicy5maXJzdC5kaXNhYmxlZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQobmV3VmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciB0aGUgdGFiIGlzIHNlbGVjdGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzZWxlY3RlZEl0ZW0gPSB0aGlzLm15VGFiQ29tcG9uZW50LnRhYnMuZmlyc3QuaXNTZWxlY3RlZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaXNTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIHNldCBpc1NlbGVjdGVkKG5ld1ZhbHVlOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2VsZWN0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBpbmRleCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldFNlbGVjdGVkSW50ZXJuYWwobmV3VmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGNvbnRleHQoKTogYW55O1xufVxuIl19