import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { GridType } from './common/grid.interface';
import { IgxGridBaseDirective } from './grid-base.directive';
import { IMultiRowLayoutNode } from './selection/selection.service';
import { GridKeydownTargetType } from './common/enums';
import * as ɵngcc0 from '@angular/core';
export interface ColumnGroupsCache {
    level: number;
    visibleIndex: number;
}
export interface IActiveNode {
    gridID?: string;
    row: number;
    column?: number;
    level?: number;
    mchCache?: ColumnGroupsCache;
    layout?: IMultiRowLayoutNode;
}
/** @hidden */
export declare class IgxGridNavigationService {
    grid: IgxGridBaseDirective & GridType;
    activeNode: IActiveNode;
    protected pendingNavigation: boolean;
    handleNavigation(event: KeyboardEvent): void;
    dispatchEvent(event: KeyboardEvent): void;
    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent): {
        rowIndex: number;
        colIndex: number;
    };
    summaryNav(event: KeyboardEvent): void;
    headerNavigation(event: KeyboardEvent): void;
    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number): void;
    focusTbody(event: any): void;
    focusFirstCell(header?: boolean): void;
    get lastColumnIndex(): number;
    get displayContainerWidth(): number;
    get displayContainerScrollLeft(): number;
    get containerTopOffset(): number;
    isColumnFullyVisible(columnIndex: number): boolean;
    protected getColumnUnpinnedIndex(visibleColumnIndex: number): any;
    protected forOfDir(): IgxForOfDirective<any>;
    protected handleAlt(key: string, event: KeyboardEvent): void;
    protected handleEditing(shift: boolean, event: KeyboardEvent): void;
    shouldPerformHorizontalScroll(visibleColIndex: number, rowIndex?: number): boolean;
    shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean;
    protected navigateInBody(rowIndex: any, visibleColIndex: any, cb?: Function): void;
    performVerticalScrollToCell(rowIndex: number, visibleColIndex?: number, cb?: () => void): void;
    performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void): void;
    isDataRow(rowIndex: number, includeSummary?: boolean): boolean;
    protected emitKeyDown(type: GridKeydownTargetType, rowIndex: any, event: any): true;
    protected isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean;
    protected findFirstDataRowIndex(): number;
    protected findLastDataRowIndex(): number;
    protected getRowElementByIndex(index: any): any;
    protected isValidPosition(rowIndex: number, colIndex: number): boolean;
    protected performHeaderKeyCombination(column: any, key: any, shift: any, ctrl: any, alt: any, event: any): void;
    private handleMCHeaderNav;
    private handleMCHExpandCollapse;
    private handleColumnSelection;
    private getNextColumnMCH;
    private get currentActiveColumn();
    private isActiveNode;
    private isToggleKey;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridNavigationService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxGridNavigationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hGb3JPZkRpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJTXVsdGlSb3dMYXlvdXROb2RlIH0gZnJvbSAnLi9zZWxlY3Rpb24vc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZEtleWRvd25UYXJnZXRUeXBlIH0gZnJvbSAnLi9jb21tb24vZW51bXMnO1xuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5Hcm91cHNDYWNoZSB7XG4gICAgbGV2ZWw6IG51bWJlcjtcbiAgICB2aXNpYmxlSW5kZXg6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGl2ZU5vZGUge1xuICAgIGdyaWRJRD86IHN0cmluZztcbiAgICByb3c6IG51bWJlcjtcbiAgICBjb2x1bW4/OiBudW1iZXI7XG4gICAgbGV2ZWw/OiBudW1iZXI7XG4gICAgbWNoQ2FjaGU/OiBDb2x1bW5Hcm91cHNDYWNoZTtcbiAgICBsYXlvdXQ/OiBJTXVsdGlSb3dMYXlvdXROb2RlO1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEdyaWROYXZpZ2F0aW9uU2VydmljZSB7XG4gICAgZ3JpZDogSWd4R3JpZEJhc2VEaXJlY3RpdmUgJiBHcmlkVHlwZTtcbiAgICBhY3RpdmVOb2RlOiBJQWN0aXZlTm9kZTtcbiAgICBwcm90ZWN0ZWQgcGVuZGluZ05hdmlnYXRpb246IGJvb2xlYW47XG4gICAgaGFuZGxlTmF2aWdhdGlvbihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdldE5leHRQb3NpdGlvbihyb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyLCBrZXk6IHN0cmluZywgc2hpZnQ6IGJvb2xlYW4sIGN0cmw6IGJvb2xlYW4sIGV2ZW50OiBLZXlib2FyZEV2ZW50KToge1xuICAgICAgICByb3dJbmRleDogbnVtYmVyO1xuICAgICAgICBjb2xJbmRleDogbnVtYmVyO1xuICAgIH07XG4gICAgc3VtbWFyeU5hdihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgaGVhZGVyTmF2aWdhdGlvbihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGhvcml6b250YWxOYXYoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGtleTogc3RyaW5nLCByb3dJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBmb2N1c1Rib2R5KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZvY3VzRmlyc3RDZWxsKGhlYWRlcj86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGdldCBsYXN0Q29sdW1uSW5kZXgoKTogbnVtYmVyO1xuICAgIGdldCBkaXNwbGF5Q29udGFpbmVyV2lkdGgoKTogbnVtYmVyO1xuICAgIGdldCBkaXNwbGF5Q29udGFpbmVyU2Nyb2xsTGVmdCgpOiBudW1iZXI7XG4gICAgZ2V0IGNvbnRhaW5lclRvcE9mZnNldCgpOiBudW1iZXI7XG4gICAgaXNDb2x1bW5GdWxseVZpc2libGUoY29sdW1uSW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGdldENvbHVtblVucGlubmVkSW5kZXgodmlzaWJsZUNvbHVtbkluZGV4OiBudW1iZXIpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGZvck9mRGlyKCk6IElneEZvck9mRGlyZWN0aXZlPGFueT47XG4gICAgcHJvdGVjdGVkIGhhbmRsZUFsdChrZXk6IHN0cmluZywgZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBoYW5kbGVFZGl0aW5nKHNoaWZ0OiBib29sZWFuLCBldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgc2hvdWxkUGVyZm9ybUhvcml6b250YWxTY3JvbGwodmlzaWJsZUNvbEluZGV4OiBudW1iZXIsIHJvd0luZGV4PzogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBzaG91bGRQZXJmb3JtVmVydGljYWxTY3JvbGwodGFyZ2V0Um93SW5kZXg6IG51bWJlciwgdmlzaWJsZUNvbEluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBuYXZpZ2F0ZUluQm9keShyb3dJbmRleDogYW55LCB2aXNpYmxlQ29sSW5kZXg6IGFueSwgY2I/OiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgcGVyZm9ybVZlcnRpY2FsU2Nyb2xsVG9DZWxsKHJvd0luZGV4OiBudW1iZXIsIHZpc2libGVDb2xJbmRleD86IG51bWJlciwgY2I/OiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBwZXJmb3JtSG9yaXpvbnRhbFNjcm9sbFRvQ2VsbCh2aXNpYmxlQ29sdW1uSW5kZXg6IG51bWJlciwgY2I/OiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBpc0RhdGFSb3cocm93SW5kZXg6IG51bWJlciwgaW5jbHVkZVN1bW1hcnk/OiBib29sZWFuKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgZW1pdEtleURvd24odHlwZTogR3JpZEtleWRvd25UYXJnZXRUeXBlLCByb3dJbmRleDogYW55LCBldmVudDogYW55KTogdHJ1ZTtcbiAgICBwcm90ZWN0ZWQgaXNDb2x1bW5QaW5uZWQoY29sdW1uSW5kZXg6IG51bWJlciwgZm9yT2ZEaXI6IElneEZvck9mRGlyZWN0aXZlPGFueT4pOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBmaW5kRmlyc3REYXRhUm93SW5kZXgoKTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBmaW5kTGFzdERhdGFSb3dJbmRleCgpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGdldFJvd0VsZW1lbnRCeUluZGV4KGluZGV4OiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGlzVmFsaWRQb3NpdGlvbihyb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgcGVyZm9ybUhlYWRlcktleUNvbWJpbmF0aW9uKGNvbHVtbjogYW55LCBrZXk6IGFueSwgc2hpZnQ6IGFueSwgY3RybDogYW55LCBhbHQ6IGFueSwgZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVNQ0hlYWRlck5hdjtcbiAgICBwcml2YXRlIGhhbmRsZU1DSEV4cGFuZENvbGxhcHNlO1xuICAgIHByaXZhdGUgaGFuZGxlQ29sdW1uU2VsZWN0aW9uO1xuICAgIHByaXZhdGUgZ2V0TmV4dENvbHVtbk1DSDtcbiAgICBwcml2YXRlIGdldCBjdXJyZW50QWN0aXZlQ29sdW1uKCk7XG4gICAgcHJpdmF0ZSBpc0FjdGl2ZU5vZGU7XG4gICAgcHJpdmF0ZSBpc1RvZ2dsZUtleTtcbn1cbiJdfQ==