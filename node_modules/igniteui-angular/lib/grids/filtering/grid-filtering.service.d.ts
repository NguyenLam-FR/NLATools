import { OnDestroy, NgModuleRef } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { IgxColumnComponent } from '../columns/column.component';
import { IFilteringOperation } from '../../data-operations/filtering-condition';
import { GridBaseAPIService } from '../api.service';
import { GridType } from '../common/grid.interface';
import { IgxDatePipeComponent } from '../common/pipes';
import { IgxOverlayService } from '../../services/overlay/overlay';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpressionUI {
    expression: IFilteringExpression;
    beforeOperator: FilteringLogic;
    afterOperator: FilteringLogic;
    isSelected: boolean;
    isVisible: boolean;
}
/**
 * @hidden
 */
export declare class IgxFilteringService implements OnDestroy {
    private gridAPI;
    private _moduleRef;
    private iconService;
    private _overlayService;
    private columnsWithComplexFilter;
    private areEventsSubscribed;
    private destroy$;
    private isFiltering;
    private columnToExpressionsMap;
    private _datePipe;
    private columnStartIndex;
    private _filterIconsRegistered;
    private _componentOverlayId;
    private _filterMenuPositionSettings;
    private _filterMenuOverlaySettings;
    private column;
    isFilterRowVisible: boolean;
    filteredColumn: IgxColumnComponent;
    selectedExpression: IFilteringExpression;
    columnToMoreIconHidden: Map<string, boolean>;
    activeFilterCell: number;
    grid: IgxGridBaseDirective;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, _moduleRef: NgModuleRef<any>, iconService: IgxIconService, _overlayService: IgxOverlayService);
    ngOnDestroy(): void;
    toggleFilterDropdown(element: any, column: any, classRef: any): void;
    initFilteringSettings(): void;
    hideExcelFiltering(): void;
    get datePipe(): IgxDatePipeComponent;
    /**
     * Subscribe to grid's events.
     */
    subscribeToEvents(): void;
    /**
     * Close filtering row if a column is hidden.
     */
    hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent): void;
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    filterInternal(field: string, expressions?: FilteringExpressionsTree | Array<ExpressionUI>): void;
    /**
     * Execute filtering on the grid.
     */
    filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;
    /**
     * Clears the filter of a given column if name is provided. Otherwise clears the filters of all columns.
     */
    clearFilter(field: string): void;
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    filterGlobal(value: any, condition: any, ignoreCase?: any): void;
    /**
     * Register filtering SVG icons in the icon service.
     */
    registerSVGIcons(): void;
    /**
     * Returns the ExpressionUI array for a given column.
     */
    getExpressions(columnId: string): ExpressionUI[];
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    refreshExpressions(): void;
    /**
     * Remove an ExpressionUI for a given column.
     */
    removeExpression(columnId: string, indexToRemove: number): void;
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    createSimpleFilteringTree(columnId: string, expressionUIList?: any): FilteringExpressionsTree;
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    isFilterComplex(columnId: string): boolean;
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    getOperatorAsString(operator: FilteringLogic): any;
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    getChipLabel(expression: IFilteringExpression): any;
    /**
     * Updates the content of a filterCell.
     */
    updateFilteringCell(column: IgxColumnComponent): void;
    get filteredData(): any[];
    private isFilteringTreeComplex;
    private getChildAndOperatorsCount;
    generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression, operator: FilteringLogic, expressionsUIs: ExpressionUI[]): void;
    private generateExpressionsListRecursive;
    isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilteringService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxFilteringService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmcuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJncmlkLWZpbHRlcmluZy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBOZ01vZHVsZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4SWNvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9pY29uL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElGaWx0ZXJpbmdFeHByZXNzaW9uLCBGaWx0ZXJpbmdMb2dpYyB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElGaWx0ZXJpbmdPcGVyYXRpb24gfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBHcmlkVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hEYXRlUGlwZUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9waXBlcyc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL292ZXJsYXkvb3ZlcmxheSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhwcmVzc2lvblVJIHtcbiAgICBleHByZXNzaW9uOiBJRmlsdGVyaW5nRXhwcmVzc2lvbjtcbiAgICBiZWZvcmVPcGVyYXRvcjogRmlsdGVyaW5nTG9naWM7XG4gICAgYWZ0ZXJPcGVyYXRvcjogRmlsdGVyaW5nTG9naWM7XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RmlsdGVyaW5nU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIHByaXZhdGUgX21vZHVsZVJlZjtcbiAgICBwcml2YXRlIGljb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgX292ZXJsYXlTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uc1dpdGhDb21wbGV4RmlsdGVyO1xuICAgIHByaXZhdGUgYXJlRXZlbnRzU3Vic2NyaWJlZDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgaXNGaWx0ZXJpbmc7XG4gICAgcHJpdmF0ZSBjb2x1bW5Ub0V4cHJlc3Npb25zTWFwO1xuICAgIHByaXZhdGUgX2RhdGVQaXBlO1xuICAgIHByaXZhdGUgY29sdW1uU3RhcnRJbmRleDtcbiAgICBwcml2YXRlIF9maWx0ZXJJY29uc1JlZ2lzdGVyZWQ7XG4gICAgcHJpdmF0ZSBfY29tcG9uZW50T3ZlcmxheUlkO1xuICAgIHByaXZhdGUgX2ZpbHRlck1lbnVQb3NpdGlvblNldHRpbmdzO1xuICAgIHByaXZhdGUgX2ZpbHRlck1lbnVPdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBjb2x1bW47XG4gICAgaXNGaWx0ZXJSb3dWaXNpYmxlOiBib29sZWFuO1xuICAgIGZpbHRlcmVkQ29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgc2VsZWN0ZWRFeHByZXNzaW9uOiBJRmlsdGVyaW5nRXhwcmVzc2lvbjtcbiAgICBjb2x1bW5Ub01vcmVJY29uSGlkZGVuOiBNYXA8c3RyaW5nLCBib29sZWFuPjtcbiAgICBhY3RpdmVGaWx0ZXJDZWxsOiBudW1iZXI7XG4gICAgZ3JpZDogSWd4R3JpZEJhc2VEaXJlY3RpdmU7XG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBfbW9kdWxlUmVmOiBOZ01vZHVsZVJlZjxhbnk+LCBpY29uU2VydmljZTogSWd4SWNvblNlcnZpY2UsIF9vdmVybGF5U2VydmljZTogSWd4T3ZlcmxheVNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdG9nZ2xlRmlsdGVyRHJvcGRvd24oZWxlbWVudDogYW55LCBjb2x1bW46IGFueSwgY2xhc3NSZWY6IGFueSk6IHZvaWQ7XG4gICAgaW5pdEZpbHRlcmluZ1NldHRpbmdzKCk6IHZvaWQ7XG4gICAgaGlkZUV4Y2VsRmlsdGVyaW5nKCk6IHZvaWQ7XG4gICAgZ2V0IGRhdGVQaXBlKCk6IElneERhdGVQaXBlQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBncmlkJ3MgZXZlbnRzLlxuICAgICAqL1xuICAgIHN1YnNjcmliZVRvRXZlbnRzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xvc2UgZmlsdGVyaW5nIHJvdyBpZiBhIGNvbHVtbiBpcyBoaWRkZW4uXG4gICAgICovXG4gICAgaGlkZUZpbHRlcmluZ1Jvd09uQ29sdW1uVmlzaWJpbGl0eUNoYW5nZShjb2w6IElneENvbHVtbkNvbXBvbmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGNyZWF0ZSBleHByZXNzaW9uc1RyZWUgYW5kIGZpbHRlciBncmlkIHVzZWQgaW4gYm90aCBmaWx0ZXIgbW9kZXMuXG4gICAgICovXG4gICAgZmlsdGVySW50ZXJuYWwoZmllbGQ6IHN0cmluZywgZXhwcmVzc2lvbnM/OiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfCBBcnJheTxFeHByZXNzaW9uVUk+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGZpbHRlcmluZyBvbiB0aGUgZ3JpZC5cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGQ6IHN0cmluZywgdmFsdWU6IGFueSwgY29uZGl0aW9uT3JFeHByZXNzaW9uVHJlZT86IElGaWx0ZXJpbmdPcGVyYXRpb24gfCBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLCBpZ25vcmVDYXNlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBmaWx0ZXIgb2YgYSBnaXZlbiBjb2x1bW4gaWYgbmFtZSBpcyBwcm92aWRlZC4gT3RoZXJ3aXNlIGNsZWFycyB0aGUgZmlsdGVycyBvZiBhbGwgY29sdW1ucy5cbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcihmaWVsZDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIGFsbCB0aGUgYElneENvbHVtbkNvbXBvbmVudGAgaW4gdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCB3aXRoIHRoZSBzYW1lIGNvbmRpdGlvbi5cbiAgICAgKi9cbiAgICBmaWx0ZXJHbG9iYWwodmFsdWU6IGFueSwgY29uZGl0aW9uOiBhbnksIGlnbm9yZUNhc2U/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGZpbHRlcmluZyBTVkcgaWNvbnMgaW4gdGhlIGljb24gc2VydmljZS5cbiAgICAgKi9cbiAgICByZWdpc3RlclNWR0ljb25zKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgRXhwcmVzc2lvblVJIGFycmF5IGZvciBhIGdpdmVuIGNvbHVtbi5cbiAgICAgKi9cbiAgICBnZXRFeHByZXNzaW9ucyhjb2x1bW5JZDogc3RyaW5nKTogRXhwcmVzc2lvblVJW107XG4gICAgLyoqXG4gICAgICogUmVjcmVhdGVzIGFsbCBFeHByZXNzaW9uVUlzIGZvciBhbGwgY29sdW1ucy4gRXhlY3V0ZWQgYWZ0ZXIgZmlsdGVyaW5nIHRvIHJlZnJlc2ggdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIHJlZnJlc2hFeHByZXNzaW9ucygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBFeHByZXNzaW9uVUkgZm9yIGEgZ2l2ZW4gY29sdW1uLlxuICAgICAqL1xuICAgIHJlbW92ZUV4cHJlc3Npb24oY29sdW1uSWQ6IHN0cmluZywgaW5kZXhUb1JlbW92ZTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBmaWx0ZXJpbmcgdHJlZSBmb3IgYSBnaXZlbiBjb2x1bW4gZnJvbSBleGlzdGluZyBFeHByZXNzaW9uVUlzLlxuICAgICAqL1xuICAgIGNyZWF0ZVNpbXBsZUZpbHRlcmluZ1RyZWUoY29sdW1uSWQ6IHN0cmluZywgZXhwcmVzc2lvblVJTGlzdD86IGFueSk6IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjb21wbGV4IGZpbHRlciBpcyBhcHBsaWVkIHRvIGEgZ2l2ZW4gY29sdW1uLlxuICAgICAqL1xuICAgIGlzRmlsdGVyQ29tcGxleChjb2x1bW5JZDogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIEZpbHRlcmluZ0xvZ2ljIG9wZXJhdG9yLlxuICAgICAqL1xuICAgIGdldE9wZXJhdG9yQXNTdHJpbmcob3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljKTogYW55O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBsYWJlbCBvZiBhIGNoaXAgZnJvbSBhIGdpdmVuIGZpbHRlcmluZyBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIGdldENoaXBMYWJlbChleHByZXNzaW9uOiBJRmlsdGVyaW5nRXhwcmVzc2lvbik6IGFueTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb250ZW50IG9mIGEgZmlsdGVyQ2VsbC5cbiAgICAgKi9cbiAgICB1cGRhdGVGaWx0ZXJpbmdDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KTogdm9pZDtcbiAgICBnZXQgZmlsdGVyZWREYXRhKCk6IGFueVtdO1xuICAgIHByaXZhdGUgaXNGaWx0ZXJpbmdUcmVlQ29tcGxleDtcbiAgICBwcml2YXRlIGdldENoaWxkQW5kT3BlcmF0b3JzQ291bnQ7XG4gICAgZ2VuZXJhdGVFeHByZXNzaW9uc0xpc3QoZXhwcmVzc2lvbnM6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfCBJRmlsdGVyaW5nRXhwcmVzc2lvbiwgb3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljLCBleHByZXNzaW9uc1VJczogRXhwcmVzc2lvblVJW10pOiB2b2lkO1xuICAgIHByaXZhdGUgZ2VuZXJhdGVFeHByZXNzaW9uc0xpc3RSZWN1cnNpdmU7XG4gICAgaXNGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVFbXB0eShleHByZXNzaW9uVHJlZTogSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSk6IGJvb2xlYW47XG59XG4iXX0=