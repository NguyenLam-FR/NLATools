import { AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IFilteringOperation } from '../../../data-operations/filtering-condition';
import { OverlaySettings } from '../../../services/public_api';
import { IBaseEventArgs } from '../../../core/utils';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DisplayDensity } from '../../../core/density';
import { IgxSelectComponent } from '../../../select/select.component';
import { IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';
import { IgxInputDirective } from '../../../input-group/public_api';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export interface ILogicOperatorChangedArgs extends IBaseEventArgs {
    target: ExpressionUI;
    newValue: FilteringLogic;
}
/**
 * @hidden
 */
export declare class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {
    cdr: ChangeDetectorRef;
    dropDownOverlaySettings: OverlaySettings;
    column: IgxColumnComponent;
    expressionUI: ExpressionUI;
    expressionsList: Array<ExpressionUI>;
    grid: any;
    displayDensity: DisplayDensity;
    onExpressionRemoved: EventEmitter<ExpressionUI>;
    onLogicOperatorChanged: EventEmitter<ILogicOperatorChangedArgs>;
    overlayOutlet: IgxOverlayOutletDirective;
    protected dropdownConditions: IgxSelectComponent;
    protected logicOperatorButtonGroup: IgxButtonGroupComponent;
    protected inputValuesDirective: IgxInputDirective;
    get isLast(): boolean;
    get isSingle(): boolean;
    get conditionsPlaceholder(): string;
    get inputValuePlaceholder(): string;
    get type(): "text" | "number";
    constructor(cdr: ChangeDetectorRef);
    get conditions(): string[];
    protected get inputValuesElement(): IgxInputDirective;
    ngAfterViewInit(): void;
    focus(): void;
    translateCondition(value: string): string;
    getIconName(): string;
    isConditionSelected(conditionName: string): boolean;
    onConditionsChanged(eventArgs: any): void;
    getCondition(value: string): IFilteringOperation;
    onValuesInput(eventArgs: any): void;
    onLogicOperatorButtonClicked(eventArgs: any, buttonIndex: number): void;
    onLogicOperatorKeyDown(eventArgs: any, buttonIndex: number): void;
    onRemoveButtonClick(): void;
    onOutletPointerDown(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExcelStyleDefaultExpressionComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxExcelStyleDefaultExpressionComponent, "igx-excel-style-default-expression", never, { "column": "column"; "expressionUI": "expressionUI"; "expressionsList": "expressionsList"; "grid": "grid"; "displayDensity": "displayDensity"; }, { "onExpressionRemoved": "onExpressionRemoved"; "onLogicOperatorChanged": "onLogicOperatorChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtZGVmYXVsdC1leHByZXNzaW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1zdHlsZS1kZWZhdWx0LWV4cHJlc3Npb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IEV4cHJlc3Npb25VSSB9IGZyb20gJy4uL2dyaWQtZmlsdGVyaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4QnV0dG9uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9idXR0b25Hcm91cC9idXR0b25Hcm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ09wZXJhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctY29uZGl0aW9uJztcbmltcG9ydCB7IE92ZXJsYXlTZXR0aW5ncyB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IEZpbHRlcmluZ0xvZ2ljIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZGVuc2l0eSc7XG5pbXBvcnQgeyBJZ3hTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2lucHV0LWdyb3VwL3B1YmxpY19hcGknO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2ljT3BlcmF0b3JDaGFuZ2VkQXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICB0YXJnZXQ6IEV4cHJlc3Npb25VSTtcbiAgICBuZXdWYWx1ZTogRmlsdGVyaW5nTG9naWM7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RXhjZWxTdHlsZURlZmF1bHRFeHByZXNzaW9uQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBkcm9wRG93bk92ZXJsYXlTZXR0aW5nczogT3ZlcmxheVNldHRpbmdzO1xuICAgIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIGV4cHJlc3Npb25VSTogRXhwcmVzc2lvblVJO1xuICAgIGV4cHJlc3Npb25zTGlzdDogQXJyYXk8RXhwcmVzc2lvblVJPjtcbiAgICBncmlkOiBhbnk7XG4gICAgZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5O1xuICAgIG9uRXhwcmVzc2lvblJlbW92ZWQ6IEV2ZW50RW1pdHRlcjxFeHByZXNzaW9uVUk+O1xuICAgIG9uTG9naWNPcGVyYXRvckNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxJTG9naWNPcGVyYXRvckNoYW5nZWRBcmdzPjtcbiAgICBvdmVybGF5T3V0bGV0OiBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlO1xuICAgIHByb3RlY3RlZCBkcm9wZG93bkNvbmRpdGlvbnM6IElneFNlbGVjdENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgbG9naWNPcGVyYXRvckJ1dHRvbkdyb3VwOiBJZ3hCdXR0b25Hcm91cENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgaW5wdXRWYWx1ZXNEaXJlY3RpdmU6IElneElucHV0RGlyZWN0aXZlO1xuICAgIGdldCBpc0xhc3QoKTogYm9vbGVhbjtcbiAgICBnZXQgaXNTaW5nbGUoKTogYm9vbGVhbjtcbiAgICBnZXQgY29uZGl0aW9uc1BsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBnZXQgaW5wdXRWYWx1ZVBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBnZXQgdHlwZSgpOiBcInRleHRcIiB8IFwibnVtYmVyXCI7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0IGNvbmRpdGlvbnMoKTogc3RyaW5nW107XG4gICAgcHJvdGVjdGVkIGdldCBpbnB1dFZhbHVlc0VsZW1lbnQoKTogSWd4SW5wdXREaXJlY3RpdmU7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICB0cmFuc2xhdGVDb25kaXRpb24odmFsdWU6IHN0cmluZyk6IHN0cmluZztcbiAgICBnZXRJY29uTmFtZSgpOiBzdHJpbmc7XG4gICAgaXNDb25kaXRpb25TZWxlY3RlZChjb25kaXRpb25OYW1lOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIG9uQ29uZGl0aW9uc0NoYW5nZWQoZXZlbnRBcmdzOiBhbnkpOiB2b2lkO1xuICAgIGdldENvbmRpdGlvbih2YWx1ZTogc3RyaW5nKTogSUZpbHRlcmluZ09wZXJhdGlvbjtcbiAgICBvblZhbHVlc0lucHV0KGV2ZW50QXJnczogYW55KTogdm9pZDtcbiAgICBvbkxvZ2ljT3BlcmF0b3JCdXR0b25DbGlja2VkKGV2ZW50QXJnczogYW55LCBidXR0b25JbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBvbkxvZ2ljT3BlcmF0b3JLZXlEb3duKGV2ZW50QXJnczogYW55LCBidXR0b25JbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBvblJlbW92ZUJ1dHRvbkNsaWNrKCk6IHZvaWQ7XG4gICAgb25PdXRsZXRQb2ludGVyRG93bihldmVudDogYW55KTogdm9pZDtcbn1cbiJdfQ==