import { ElementRef, EventEmitter, PipeTransform, Renderer2, OnInit, AfterViewChecked } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { MaskParsingService, MaskOptions } from './mask-parsing.service';
import { IBaseEventArgs } from '../../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxMaskDirective implements OnInit, AfterViewChecked, ControlValueAccessor {
    protected elementRef: ElementRef;
    protected maskParser: MaskParsingService;
    protected renderer: Renderer2;
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     */
    mask: string;
    /**
     * Sets the character representing a fillable spot in the input mask.
     * Default value is "'_'".
     * ```html
     * <input [promptChar] = "'/'">
     * ```
     */
    promptChar: string;
    /**
     * Specifies if the bound value includes the formatting symbols.
     * ```html
     * <input [includeLiterals] = "true">
     * ```
     */
    includeLiterals: boolean;
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     */
    set placeholder(val: string);
    get placeholder(): string;
    /**
     * Specifies a pipe to be used on blur.
     * ```html
     * <input [displayValuePipe] = "displayFormatPipe">
     * ```
     */
    displayValuePipe: PipeTransform;
    /**
     * Specifies a pipe to be used on focus.
     * ```html
     * <input [focusedValuePipe] = "inputFormatPipe">
     * ```
     */
    focusedValuePipe: PipeTransform;
    /**
     * Emits an event each time the value changes.
     * Provides `rawValue: string` and `formattedValue: string` as event arguments.
     * ```html
     * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
     * ```
     */
    onValueChange: EventEmitter<IMaskEventArgs>;
    /** @hidden */
    get nativeElement(): HTMLInputElement;
    /** @hidden @internal; */
    protected get inputValue(): string;
    /** @hidden @internal */
    protected set inputValue(val: string);
    /** @hidden */
    protected get maskOptions(): MaskOptions;
    /** @hidden */
    protected get selectionStart(): number;
    /** @hidden */
    protected get selectionEnd(): number;
    /** @hidden */
    protected get start(): number;
    /** @hidden */
    protected get end(): number;
    private _end;
    private _start;
    private _key;
    private _oldText;
    private _dataValue;
    private _focused;
    private _droppedData;
    private _hasDropAction;
    private _stopPropagation;
    private _onTouchedCallback;
    private _onChangeCallback;
    constructor(elementRef: ElementRef, maskParser: MaskParsingService, renderer: Renderer2);
    /** @hidden */
    ngOnInit(): void;
    /**
     * TODO: Remove after date/time picker integration refactor
     * @hidden
     */
    ngAfterViewChecked(): void;
    /** @hidden */
    onKeyDown(event: any): void;
    /** @hidden */
    onInputChanged(): void;
    /** @hidden */
    onPaste(): void;
    /** @hidden */
    onFocus(): void;
    /** @hidden */
    onBlur(value: string): void;
    /** @hidden */
    onDragEnter(): void;
    /** @hidden */
    onDragLeave(): void;
    /** @hidden */
    onDrop(event: DragEvent): void;
    /** @hidden */
    protected showMask(value: string): void;
    /** @hidden */
    protected setSelectionRange(start: number, end?: number): void;
    /** @hidden */
    protected afterInput(): void;
    private showDisplayValue;
    /** @hidden */
    writeValue(value: string): void;
    /** @hidden */
    registerOnChange(fn: (_: any) => void): void;
    /** @hidden */
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxMaskDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxMaskDirective, "[igxMask]", ["igxMask"], { "promptChar": "promptChar"; "mask": "igxMask"; "includeLiterals": "includeLiterals"; "displayValuePipe": "displayValuePipe"; "focusedValuePipe": "focusedValuePipe"; }, { "onValueChange": "onValueChange"; }, never>;
}
/**
 * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.
 */
export interface IMaskEventArgs extends IBaseEventArgs {
    rawValue: string;
    formattedValue: string;
}
/** @hidden */
export declare class IgxMaskModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxMaskModule, [typeof IgxMaskDirective], [typeof ɵngcc1.CommonModule], [typeof IgxMaskDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxMaskModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFBpcGVUcmFuc2Zvcm0sIFJlbmRlcmVyMiwgT25Jbml0LCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hc2tQYXJzaW5nU2VydmljZSwgTWFza09wdGlvbnMgfSBmcm9tICcuL21hc2stcGFyc2luZy5zZXJ2aWNlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hNYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdDaGVja2VkLCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIG1hc2tQYXJzZXI6IE1hc2tQYXJzaW5nU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbnB1dCBtYXNrLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgW2lneE1hc2tdID0gXCInMDAvMDAvMDAwMCdcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBtYXNrOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY2hhcmFjdGVyIHJlcHJlc2VudGluZyBhIGZpbGxhYmxlIHNwb3QgaW4gdGhlIGlucHV0IG1hc2suXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBcIidfJ1wiLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgW3Byb21wdENoYXJdID0gXCInLydcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwcm9tcHRDaGFyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBib3VuZCB2YWx1ZSBpbmNsdWRlcyB0aGUgZm9ybWF0dGluZyBzeW1ib2xzLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgW2luY2x1ZGVMaXRlcmFsc10gPSBcInRydWVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBpbmNsdWRlTGl0ZXJhbHM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgcGxhY2Vob2xkZXIuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCBwbGFjZWhvbGRlciA9IFwiZW50ZXIgdGV4dC4uLlwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBwbGFjZWhvbGRlcih2YWw6IHN0cmluZyk7XG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBwaXBlIHRvIGJlIHVzZWQgb24gYmx1ci5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtkaXNwbGF5VmFsdWVQaXBlXSA9IFwiZGlzcGxheUZvcm1hdFBpcGVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBkaXNwbGF5VmFsdWVQaXBlOiBQaXBlVHJhbnNmb3JtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIHBpcGUgdG8gYmUgdXNlZCBvbiBmb2N1cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtmb2N1c2VkVmFsdWVQaXBlXSA9IFwiaW5wdXRGb3JtYXRQaXBlXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZm9jdXNlZFZhbHVlUGlwZTogUGlwZVRyYW5zZm9ybTtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCBlYWNoIHRpbWUgdGhlIHZhbHVlIGNoYW5nZXMuXG4gICAgICogUHJvdmlkZXMgYHJhd1ZhbHVlOiBzdHJpbmdgIGFuZCBgZm9ybWF0dGVkVmFsdWU6IHN0cmluZ2AgYXMgZXZlbnQgYXJndW1lbnRzLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgKG9uVmFsdWVDaGFuZ2UpID0gXCJvblZhbHVlQ2hhbmdlKHJhd1ZhbHVlOiBzdHJpbmcsIGZvcm1hdHRlZFZhbHVlOiBzdHJpbmcpXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25WYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPElNYXNrRXZlbnRBcmdzPjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGdldCBuYXRpdmVFbGVtZW50KCk6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsOyAqL1xuICAgIHByb3RlY3RlZCBnZXQgaW5wdXRWYWx1ZSgpOiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHJvdGVjdGVkIHNldCBpbnB1dFZhbHVlKHZhbDogc3RyaW5nKTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBnZXQgbWFza09wdGlvbnMoKTogTWFza09wdGlvbnM7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdGlvblN0YXJ0KCk6IG51bWJlcjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBnZXQgc2VsZWN0aW9uRW5kKCk6IG51bWJlcjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBnZXQgc3RhcnQoKTogbnVtYmVyO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIGdldCBlbmQoKTogbnVtYmVyO1xuICAgIHByaXZhdGUgX2VuZDtcbiAgICBwcml2YXRlIF9zdGFydDtcbiAgICBwcml2YXRlIF9rZXk7XG4gICAgcHJpdmF0ZSBfb2xkVGV4dDtcbiAgICBwcml2YXRlIF9kYXRhVmFsdWU7XG4gICAgcHJpdmF0ZSBfZm9jdXNlZDtcbiAgICBwcml2YXRlIF9kcm9wcGVkRGF0YTtcbiAgICBwcml2YXRlIF9oYXNEcm9wQWN0aW9uO1xuICAgIHByaXZhdGUgX3N0b3BQcm9wYWdhdGlvbjtcbiAgICBwcml2YXRlIF9vblRvdWNoZWRDYWxsYmFjaztcbiAgICBwcml2YXRlIF9vbkNoYW5nZUNhbGxiYWNrO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG1hc2tQYXJzZXI6IE1hc2tQYXJzaW5nU2VydmljZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRPRE86IFJlbW92ZSBhZnRlciBkYXRlL3RpbWUgcGlja2VyIGludGVncmF0aW9uIHJlZmFjdG9yXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgb25LZXlEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgb25JbnB1dENoYW5nZWQoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uUGFzdGUoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uQmx1cih2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uRHJhZ0VudGVyKCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvbkRyYWdMZWF2ZSgpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgb25Ecm9wKGV2ZW50OiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIHNob3dNYXNrKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIHNldFNlbGVjdGlvblJhbmdlKHN0YXJ0OiBudW1iZXIsIGVuZD86IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgYWZ0ZXJJbnB1dCgpOiB2b2lkO1xuICAgIHByaXZhdGUgc2hvd0Rpc3BsYXlWYWx1ZTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbn1cbi8qKlxuICogVGhlIElneE1hc2tNb2R1bGUgcHJvdmlkZXMgdGhlIHtAbGluayBJZ3hNYXNrRGlyZWN0aXZlfSBpbnNpZGUgeW91ciBhcHBsaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTWFza0V2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICByYXdWYWx1ZTogc3RyaW5nO1xuICAgIGZvcm1hdHRlZFZhbHVlOiBzdHJpbmc7XG59XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4TWFza01vZHVsZSB7XG59XG4iXX0=