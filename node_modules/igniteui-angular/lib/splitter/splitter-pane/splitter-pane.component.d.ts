import { ElementRef, EventEmitter } from '@angular/core';
/**
 * Represents individual resizable/collapsible panes.
 * @igxModule IgxSplitterModule
 *
 * @igxParent IgxSplitterComponent
 *
 * @igxKeywords pane
 *
 * @igxGroup presentation
 *
 * @remarks
 *  Users can control the resize behavior via the min and max size properties.
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxSplitterPaneComponent {
    private el;
    private _size;
    private _collapsed;
    /** @hidden @internal */
    owner: any;
    /**
     * Gets/Sets the size of the current pane.
     *  * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [size]='size'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    get size(): string;
    set size(value: string);
    /**
     * Gets/Sets the minimum allowed size of the current pane.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [minSize]='minSize'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    minSize: string;
    /**
     * Gets/Set the maximum allowed size of the current pane.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [maxSize]='maxSize'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    maxSize: string;
    /**
     * Gets/Sets whether pane is resizable.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [resizable]='false'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     * @remarks
     * If pane is not resizable its related splitter bar cannot be dragged.
     */
    resizable: boolean;
    /**
     * Event fired when collapsed state of pane is changed.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane (onToggle)='onPaneToggle($event)'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    onToggle: EventEmitter<IgxSplitterPaneComponent>;
    /** @hidden @internal */
    order: number;
    /**
     *
     * @hidden @internal
     * Gets the host native element.
     */
    get element(): any;
    /**
     * @hidden @internal
     * Gets/Sets the `overflow`.
     */
    overflow: string;
    /**
     * @hidden @internal
     * Gets/Sets the `minHeight` and `minWidth` properties of the current pane.
     */
    minHeight: number;
    /**
     * @hidden @internal
     * Gets/Sets the `maxHeight` and `maxWidth` properties of the current `IgxSplitterPaneComponent`.
     */
    maxHeight: string;
    /**
     * @hidden @internal
     * Gets the `flex` property of the current `IgxSplitterPaneComponent`.
     */
    get flex(): string;
    /**
     * @hidden @internal
     * Gets/Sets the 'display' property of the current pane.
     */
    display: string;
    /**
     * Gets/Sets whether current pane is collapsed.
     * @example
     * ```typescript
     * const isCollapsed = pane.collapsed;
     * ```
     */
    set collapsed(value: boolean);
    get collapsed(): boolean;
    /** @hidden @internal */
    private _getSiblings;
    /**
     * Toggles the collapsed state of the pane.
     * @example
     * ```typescript
     * pane.toggle();
     * ```
     */
    toggle(): void;
    constructor(el: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSplitterPaneComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSplitterPaneComponent, "igx-splitter-pane", never, { "resizable": "resizable"; "size": "size"; "collapsed": "collapsed"; "minSize": "minSize"; "maxSize": "maxSize"; }, { "onToggle": "onToggle"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBSZXByZXNlbnRzIGluZGl2aWR1YWwgcmVzaXphYmxlL2NvbGxhcHNpYmxlIHBhbmVzLlxuICogQGlneE1vZHVsZSBJZ3hTcGxpdHRlck1vZHVsZVxuICpcbiAqIEBpZ3hQYXJlbnQgSWd4U3BsaXR0ZXJDb21wb25lbnRcbiAqXG4gKiBAaWd4S2V5d29yZHMgcGFuZVxuICpcbiAqIEBpZ3hHcm91cCBwcmVzZW50YXRpb25cbiAqXG4gKiBAcmVtYXJrc1xuICogIFVzZXJzIGNhbiBjb250cm9sIHRoZSByZXNpemUgYmVoYXZpb3IgdmlhIHRoZSBtaW4gYW5kIG1heCBzaXplIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNwbGl0dGVyUGFuZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIF9zaXplO1xuICAgIHByaXZhdGUgX2NvbGxhcHNlZDtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBvd25lcjogYW55O1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgc2l6ZSBvZiB0aGUgY3VycmVudCBwYW5lLlxuICAgICAqICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3BsaXR0ZXI+XG4gICAgICogIDxpZ3gtc3BsaXR0ZXItcGFuZSBbc2l6ZV09J3NpemUnPi4uLjwvaWd4LXNwbGl0dGVyLXBhbmU+XG4gICAgICogPC9pZ3gtc3BsaXR0ZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHNpemUoKTogc3RyaW5nO1xuICAgIHNldCBzaXplKHZhbHVlOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgbWluaW11bSBhbGxvd2VkIHNpemUgb2YgdGhlIGN1cnJlbnQgcGFuZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNwbGl0dGVyPlxuICAgICAqICA8aWd4LXNwbGl0dGVyLXBhbmUgW21pblNpemVdPSdtaW5TaXplJz4uLi48L2lneC1zcGxpdHRlci1wYW5lPlxuICAgICAqIDwvaWd4LXNwbGl0dGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG1pblNpemU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldCB0aGUgbWF4aW11bSBhbGxvd2VkIHNpemUgb2YgdGhlIGN1cnJlbnQgcGFuZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNwbGl0dGVyPlxuICAgICAqICA8aWd4LXNwbGl0dGVyLXBhbmUgW21heFNpemVdPSdtYXhTaXplJz4uLi48L2lneC1zcGxpdHRlci1wYW5lPlxuICAgICAqIDwvaWd4LXNwbGl0dGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG1heFNpemU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgd2hldGhlciBwYW5lIGlzIHJlc2l6YWJsZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNwbGl0dGVyPlxuICAgICAqICA8aWd4LXNwbGl0dGVyLXBhbmUgW3Jlc2l6YWJsZV09J2ZhbHNlJz4uLi48L2lneC1zcGxpdHRlci1wYW5lPlxuICAgICAqIDwvaWd4LXNwbGl0dGVyPlxuICAgICAqIGBgYFxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgcGFuZSBpcyBub3QgcmVzaXphYmxlIGl0cyByZWxhdGVkIHNwbGl0dGVyIGJhciBjYW5ub3QgYmUgZHJhZ2dlZC5cbiAgICAgKi9cbiAgICByZXNpemFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiBjb2xsYXBzZWQgc3RhdGUgb2YgcGFuZSBpcyBjaGFuZ2VkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3BsaXR0ZXI+XG4gICAgICogIDxpZ3gtc3BsaXR0ZXItcGFuZSAob25Ub2dnbGUpPSdvblBhbmVUb2dnbGUoJGV2ZW50KSc+Li4uPC9pZ3gtc3BsaXR0ZXItcGFuZT5cbiAgICAgKiA8L2lneC1zcGxpdHRlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvblRvZ2dsZTogRXZlbnRFbWl0dGVyPElneFNwbGl0dGVyUGFuZUNvbXBvbmVudD47XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgb3JkZXI6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogR2V0cyB0aGUgaG9zdCBuYXRpdmUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXQgZWxlbWVudCgpOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKiBHZXRzL1NldHMgdGhlIGBvdmVyZmxvd2AuXG4gICAgICovXG4gICAgb3ZlcmZsb3c6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqIEdldHMvU2V0cyB0aGUgYG1pbkhlaWdodGAgYW5kIGBtaW5XaWR0aGAgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBwYW5lLlxuICAgICAqL1xuICAgIG1pbkhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogR2V0cy9TZXRzIHRoZSBgbWF4SGVpZ2h0YCBhbmQgYG1heFdpZHRoYCBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IGBJZ3hTcGxpdHRlclBhbmVDb21wb25lbnRgLlxuICAgICAqL1xuICAgIG1heEhlaWdodDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogR2V0cyB0aGUgYGZsZXhgIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50IGBJZ3hTcGxpdHRlclBhbmVDb21wb25lbnRgLlxuICAgICAqL1xuICAgIGdldCBmbGV4KCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqIEdldHMvU2V0cyB0aGUgJ2Rpc3BsYXknIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50IHBhbmUuXG4gICAgICovXG4gICAgZGlzcGxheTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB3aGV0aGVyIGN1cnJlbnQgcGFuZSBpcyBjb2xsYXBzZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgaXNDb2xsYXBzZWQgPSBwYW5lLmNvbGxhcHNlZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgY29sbGFwc2VkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgY29sbGFwc2VkKCk6IGJvb2xlYW47XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBfZ2V0U2libGluZ3M7XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgY29sbGFwc2VkIHN0YXRlIG9mIHRoZSBwYW5lLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHBhbmUudG9nZ2xlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpO1xufVxuIl19