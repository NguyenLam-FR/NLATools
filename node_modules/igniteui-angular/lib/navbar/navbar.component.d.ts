import { EventEmitter } from '@angular/core';
/**
 * IgxActionIcon is a container for the action nav icon of the IgxNavbar.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/button/button.directive';
import * as ɵngcc2 from '../icon/public_api';
import * as ɵngcc3 from '@angular/common';
export declare class IgxActionIconDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxActionIconDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxActionIconDirective, "igx-action-icon", never, {}, {}, never>;
}
/**
 * **Ignite UI for Angular Navbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)
 *
 * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation
 * state such as a "Go Back" button. It also supports other actions represented by icons.
 *
 * Example:
 * ```html
 * <igx-navbar title="Sample App" actionButtonIcon="menu">
 *   <igx-icon>search</igx-icon>
 *   <igx-icon>favorite</igx-icon>
 *   <igx-icon>more_vert</igx-icon>
 * </igx-navbar>
 * ```
 */
export declare class IgxNavbarComponent {
    private static NEXT_ID;
    private isVisible;
    /**
     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    id: string;
    /**
     * Returns whether the `IgxNavbarComponent` action button is visible, true/false.
     * ```typescript
     *  @ViewChild("MyChild")
     * public navBar: IgxNavbarComponent;
     * ngAfterViewInit(){
     *     let actionButtonVisibile = this.navBar.isActionButtonVisible;
     * }
     * ```
     */
    get isActionButtonVisible(): boolean;
    /**
     * Sets whether the action button of the `IgxNavbarComponent` is visible.
     * ```html
     * <igx-navbar [title]="currentView" [isActionButtonVisible]="'false'"></igx-navbar>
     * ```
     */
    set isActionButtonVisible(value: boolean);
    /**
     * An @Input property that sets the icon of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar [title]="currentView" actionButtonIcon="arrow_back"></igx-navbar>
     * ```
     */
    actionButtonIcon: string;
    /**
     * An @Input property that sets the title of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar title="Sample App" actionButtonIcon="menu">
     * ```
     */
    title: string;
    /**
     * The event that will be thrown when the action is executed,
     * provides reference to the `IgxNavbar` component as argument
     * ```typescript
     * public actionExc(event){
     *     alert("Action Execute!");
     * }
     *  //..
     * ```
     * ```html
     * <igx-navbar (onAction)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    onAction: EventEmitter<IgxNavbarComponent>;
    /**
     * An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
     * ```html
     * <igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    titleId: string;
    /**
     * @hidden
     */
    protected actionIconTemplate: IgxActionIconDirective;
    /**
     * @hidden
     */
    _triggerAction(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxNavbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxNavbarComponent, "igx-navbar", never, { "id": "id"; "titleId": "titleId"; "isActionButtonVisible": "isActionButtonVisible"; "actionButtonIcon": "actionButtonIcon"; "title": "title"; }, { "onAction": "onAction"; }, ["actionIconTemplate"], ["igx-action-icon", "*"]>;
}
/**
 * @hidden
 */
export declare class IgxNavbarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxNavbarModule, [typeof IgxNavbarComponent, typeof IgxActionIconDirective], [typeof ɵngcc1.IgxButtonModule, typeof ɵngcc2.IgxIconModule, typeof ɵngcc3.CommonModule], [typeof IgxNavbarComponent, typeof IgxActionIconDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxNavbarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuYXZiYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBJZ3hBY3Rpb25JY29uIGlzIGEgY29udGFpbmVyIGZvciB0aGUgYWN0aW9uIG5hdiBpY29uIG9mIHRoZSBJZ3hOYXZiYXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEFjdGlvbkljb25EaXJlY3RpdmUge1xufVxuLyoqXG4gKiAqKklnbml0ZSBVSSBmb3IgQW5ndWxhciBOYXZiYXIqKiAtXG4gKiBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cuaW5mcmFnaXN0aWNzLmNvbS9wcm9kdWN0cy9pZ25pdGUtdWktYW5ndWxhci9hbmd1bGFyL2NvbXBvbmVudHMvbmF2YmFyLmh0bWwpXG4gKlxuICogVGhlIElnbml0ZSBVSSBOYXZiYXIgaXMgbW9zdCBjb21tb25seSB1c2VkIHRvIHByb3ZpZGUgYW4gYXBwIGhlYWRlciB3aXRoIGEgaGFtYnVyZ2VyIG1lbnUgYW5kIG5hdmlnYXRpb25cbiAqIHN0YXRlIHN1Y2ggYXMgYSBcIkdvIEJhY2tcIiBidXR0b24uIEl0IGFsc28gc3VwcG9ydHMgb3RoZXIgYWN0aW9ucyByZXByZXNlbnRlZCBieSBpY29ucy5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgaHRtbFxuICogPGlneC1uYXZiYXIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAqICAgPGlneC1pY29uPnNlYXJjaDwvaWd4LWljb24+XG4gKiAgIDxpZ3gtaWNvbj5mYXZvcml0ZTwvaWd4LWljb24+XG4gKiAgIDxpZ3gtaWNvbj5tb3JlX3ZlcnQ8L2lneC1pY29uPlxuICogPC9pZ3gtbmF2YmFyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneE5hdmJhckNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgTkVYVF9JRDtcbiAgICBwcml2YXRlIGlzVmlzaWJsZTtcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGlkYCBhdHRyaWJ1dGUuIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciBbaWRdPVwiJ2lneC1uYXZiYXItMTInXCIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgYElneE5hdmJhckNvbXBvbmVudGAgYWN0aW9uIGJ1dHRvbiBpcyB2aXNpYmxlLCB0cnVlL2ZhbHNlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgQFZpZXdDaGlsZChcIk15Q2hpbGRcIilcbiAgICAgKiBwdWJsaWMgbmF2QmFyOiBJZ3hOYXZiYXJDb21wb25lbnQ7XG4gICAgICogbmdBZnRlclZpZXdJbml0KCl7XG4gICAgICogICAgIGxldCBhY3Rpb25CdXR0b25WaXNpYmlsZSA9IHRoaXMubmF2QmFyLmlzQWN0aW9uQnV0dG9uVmlzaWJsZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGlzQWN0aW9uQnV0dG9uVmlzaWJsZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0aGUgYWN0aW9uIGJ1dHRvbiBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAgaXMgdmlzaWJsZS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1uYXZiYXIgW3RpdGxlXT1cImN1cnJlbnRWaWV3XCIgW2lzQWN0aW9uQnV0dG9uVmlzaWJsZV09XCInZmFsc2UnXCI+PC9pZ3gtbmF2YmFyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBpc0FjdGlvbkJ1dHRvblZpc2libGUodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIGljb24gb2YgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciBbdGl0bGVdPVwiY3VycmVudFZpZXdcIiBhY3Rpb25CdXR0b25JY29uPVwiYXJyb3dfYmFja1wiPjwvaWd4LW5hdmJhcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhY3Rpb25CdXR0b25JY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdGl0bGUgb2YgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRoYXQgd2lsbCBiZSB0aHJvd24gd2hlbiB0aGUgYWN0aW9uIGlzIGV4ZWN1dGVkLFxuICAgICAqIHByb3ZpZGVzIHJlZmVyZW5jZSB0byB0aGUgYElneE5hdmJhcmAgY29tcG9uZW50IGFzIGFyZ3VtZW50XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBhY3Rpb25FeGMoZXZlbnQpe1xuICAgICAqICAgICBhbGVydChcIkFjdGlvbiBFeGVjdXRlIVwiKTtcbiAgICAgKiB9XG4gICAgICogIC8vLi5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1uYXZiYXIgKG9uQWN0aW9uKT1cImFjdGlvbkV4YygkZXZlbnQpXCIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvbkFjdGlvbjogRXZlbnRFbWl0dGVyPElneE5hdmJhckNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdGl0bGVJZCBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuIElmIG5vdCBzZXQgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1uYXZiYXIgW3RpdGxlSWRdPVwiJ2lneC1uYXZiYXItNydcIiB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHRpdGxlSWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFjdGlvbkljb25UZW1wbGF0ZTogSWd4QWN0aW9uSWNvbkRpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3RyaWdnZXJBY3Rpb24oKTogdm9pZDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hOYXZiYXJNb2R1bGUge1xufVxuIl19