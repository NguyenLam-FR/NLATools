/**
 * Determines the igxBadge type
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../icon/public_api';
export declare enum IgxBadgeType {
    PRIMARY = "primary",
    INFO = "info",
    SUCCESS = "success",
    WARNING = "warning",
    ERROR = "error"
}
/**
 * Badge provides visual notifications used to decorate avatars, menus, etc.
 *
 * @igxModule IgxBadgeModule
 *
 * @igxTheme igx-badge-theme
 *
 * @igxKeywords badge, icon, notification
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the
 * application when visual notification is needed. They are usually designed as icons with a predefined
 * style to communicate information, success, warnings, or errors.
 *
 * @example
 * ```html
 * <igx-avatar>
 *   <igx-badge icon="check" type="success"></igx-badge>
 * </igx-avatar>
 */
export declare class IgxBadgeComponent {
    /**
     * Sets/gets the `id` of the badge.
     *
     * @remarks
     * If not set, the `id` will have value `"igx-badge-0"`.
     *
     * @example
     * ```html
     * <igx-badge id="igx-badge-2"></igx-badge>
     * ```
     */
    id: string;
    /**
     * Sets/gets the type of the badge.
     *
     * @remarks
     * Allowed values are `primary`, `info`, `success`, `warning`, `error`.
     * Providing an invalid value won't display a badge.
     *
     * @example
     * ```html
     * <igx-badge type="success"></igx-badge>
     * ```
     */
    type: string | IgxBadgeType;
    /**
     * Sets/gets the value to be displayed inside the badge.
     *
     * @remarks
     * If an `icon` property is already set the `icon` will be displayed.
     * If neither a `value` nor an `icon` is set the content of the badge will be empty.
     *
     * @example
     * ```html
     * <igx-badge value="11"></igx-badge>
     * ```
     */
    value: string;
    /**
     * Sets/gets an icon for the badge from the material icons set.
     *
     * @remarks
     * Has priority over the `value` property.
     * If neither a `value` nor an `icon` is set the content of the badge will be empty.
     * Providing an invalid value won't display anything.
     *
     * @example
     * ```html
     * <igx-badge icon="check"></igx-badge>
     * ```
     */
    icon: string;
    /**
     * Sets/gets the role attribute value.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.role = 'status';
     * ```
     */
    role: string;
    /**
     * Sets/gets the the css class to use on the badge.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.cssClass = 'my-badge-class';
     * ```
     */
    cssClass: string;
    /**
     * Sets/gets the aria-label attribute value.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.label = 'badge';
     * ```
     */
    label: string;
    /**
     * Defines a human-readable, accessor, author-localized description for
     * the `type` and the `icon` or `value` of the element.
     * @hidden
     * @internal
     */
    get roleDescription(): string;
    /**
     * Method which makes the name of the class more descriptive.
     * This helps the styling of the badges.
     * @hidden
     * @internal
     */
    setClasses(): {};
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxBadgeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxBadgeComponent, "igx-badge", never, { "id": "id"; "type": "type"; "value": "value"; "icon": "icon"; }, {}, never, never>;
}
/**
 * @hidden
 */
export declare class IgxBadgeModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxBadgeModule, [typeof IgxBadgeComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.IgxIconModule], [typeof IgxBadgeComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxBadgeModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhZGdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVybWluZXMgdGhlIGlneEJhZGdlIHR5cGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgZW51bSBJZ3hCYWRnZVR5cGUge1xuICAgIFBSSU1BUlkgPSBcInByaW1hcnlcIixcbiAgICBJTkZPID0gXCJpbmZvXCIsXG4gICAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuICAgIFdBUk5JTkcgPSBcIndhcm5pbmdcIixcbiAgICBFUlJPUiA9IFwiZXJyb3JcIlxufVxuLyoqXG4gKiBCYWRnZSBwcm92aWRlcyB2aXN1YWwgbm90aWZpY2F0aW9ucyB1c2VkIHRvIGRlY29yYXRlIGF2YXRhcnMsIG1lbnVzLCBldGMuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hCYWRnZU1vZHVsZVxuICpcbiAqIEBpZ3hUaGVtZSBpZ3gtYmFkZ2UtdGhlbWVcbiAqXG4gKiBAaWd4S2V5d29yZHMgYmFkZ2UsIGljb24sIG5vdGlmaWNhdGlvblxuICpcbiAqIEBpZ3hHcm91cCBEYXRhIEVudHJ5ICYgRGlzcGxheVxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGUgSWduaXRlIFVJIEJhZGdlIGlzIHVzZWQgdG8gZGVjb3JhdGUgYXZhdGFycywgbmF2aWdhdGlvbiBtZW51cywgb3Igb3RoZXIgY29tcG9uZW50cyBpbiB0aGVcbiAqIGFwcGxpY2F0aW9uIHdoZW4gdmlzdWFsIG5vdGlmaWNhdGlvbiBpcyBuZWVkZWQuIFRoZXkgYXJlIHVzdWFsbHkgZGVzaWduZWQgYXMgaWNvbnMgd2l0aCBhIHByZWRlZmluZWRcbiAqIHN0eWxlIHRvIGNvbW11bmljYXRlIGluZm9ybWF0aW9uLCBzdWNjZXNzLCB3YXJuaW5ncywgb3IgZXJyb3JzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWF2YXRhcj5cbiAqICAgPGlneC1iYWRnZSBpY29uPVwiY2hlY2tcIiB0eXBlPVwic3VjY2Vzc1wiPjwvaWd4LWJhZGdlPlxuICogPC9pZ3gtYXZhdGFyPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hCYWRnZUNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSBgaWRgIG9mIHRoZSBiYWRnZS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgbm90IHNldCwgdGhlIGBpZGAgd2lsbCBoYXZlIHZhbHVlIGBcImlneC1iYWRnZS0wXCJgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1iYWRnZSBpZD1cImlneC1iYWRnZS0yXCI+PC9pZ3gtYmFkZ2U+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHR5cGUgb2YgdGhlIGJhZGdlLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBBbGxvd2VkIHZhbHVlcyBhcmUgYHByaW1hcnlgLCBgaW5mb2AsIGBzdWNjZXNzYCwgYHdhcm5pbmdgLCBgZXJyb3JgLlxuICAgICAqIFByb3ZpZGluZyBhbiBpbnZhbGlkIHZhbHVlIHdvbid0IGRpc3BsYXkgYSBiYWRnZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYmFkZ2UgdHlwZT1cInN1Y2Nlc3NcIj48L2lneC1iYWRnZT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0eXBlOiBzdHJpbmcgfCBJZ3hCYWRnZVR5cGU7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSB2YWx1ZSB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIHRoZSBiYWRnZS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgYW4gYGljb25gIHByb3BlcnR5IGlzIGFscmVhZHkgc2V0IHRoZSBgaWNvbmAgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgICogSWYgbmVpdGhlciBhIGB2YWx1ZWAgbm9yIGFuIGBpY29uYCBpcyBzZXQgdGhlIGNvbnRlbnQgb2YgdGhlIGJhZGdlIHdpbGwgYmUgZW1wdHkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWJhZGdlIHZhbHVlPVwiMTFcIj48L2lneC1iYWRnZT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyBhbiBpY29uIGZvciB0aGUgYmFkZ2UgZnJvbSB0aGUgbWF0ZXJpYWwgaWNvbnMgc2V0LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBIYXMgcHJpb3JpdHkgb3ZlciB0aGUgYHZhbHVlYCBwcm9wZXJ0eS5cbiAgICAgKiBJZiBuZWl0aGVyIGEgYHZhbHVlYCBub3IgYW4gYGljb25gIGlzIHNldCB0aGUgY29udGVudCBvZiB0aGUgYmFkZ2Ugd2lsbCBiZSBlbXB0eS5cbiAgICAgKiBQcm92aWRpbmcgYW4gaW52YWxpZCB2YWx1ZSB3b24ndCBkaXNwbGF5IGFueXRoaW5nLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1iYWRnZSBpY29uPVwiY2hlY2tcIj48L2lneC1iYWRnZT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBpY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSByb2xlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoXCJNeUJhZGdlXCIsIHsgcmVhZDogSWd4QmFkZ2VDb21wb25lbnQgfSlcbiAgICAgKiBwdWJsaWMgYmFkZ2U6IElneEJhZGdlQ29tcG9uZW50O1xuICAgICAqXG4gICAgICogYmFkZ2Uucm9sZSA9ICdzdGF0dXMnO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHRoZSBjc3MgY2xhc3MgdG8gdXNlIG9uIHRoZSBiYWRnZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoXCJNeUJhZGdlXCIsIHsgcmVhZDogSWd4QmFkZ2VDb21wb25lbnQgfSlcbiAgICAgKiBwdWJsaWMgYmFkZ2U6IElneEJhZGdlQ29tcG9uZW50O1xuICAgICAqXG4gICAgICogYmFkZ2UuY3NzQ2xhc3MgPSAnbXktYmFkZ2UtY2xhc3MnO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSBhcmlhLWxhYmVsIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoXCJNeUJhZGdlXCIsIHsgcmVhZDogSWd4QmFkZ2VDb21wb25lbnQgfSlcbiAgICAgKiBwdWJsaWMgYmFkZ2U6IElneEJhZGdlQ29tcG9uZW50O1xuICAgICAqXG4gICAgICogYmFkZ2UubGFiZWwgPSAnYmFkZ2UnO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGh1bWFuLXJlYWRhYmxlLCBhY2Nlc3NvciwgYXV0aG9yLWxvY2FsaXplZCBkZXNjcmlwdGlvbiBmb3JcbiAgICAgKiB0aGUgYHR5cGVgIGFuZCB0aGUgYGljb25gIG9yIGB2YWx1ZWAgb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCByb2xlRGVzY3JpcHRpb24oKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB3aGljaCBtYWtlcyB0aGUgbmFtZSBvZiB0aGUgY2xhc3MgbW9yZSBkZXNjcmlwdGl2ZS5cbiAgICAgKiBUaGlzIGhlbHBzIHRoZSBzdHlsaW5nIG9mIHRoZSBiYWRnZXMuXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHNldENsYXNzZXMoKToge307XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4QmFkZ2VNb2R1bGUge1xufVxuIl19